{"/about/":{"data":{"":"","#":"","如果有一天#如果有一天…":"","快问快答#快问快答":"\n吴海隆 就读于： 太原理工大学 软件工程 邮箱： puppy1599@outlook.com 签名： 于道各努力，千里自同风 致谢 致我深爱的她 在这段追梦的旅途中，我最想感谢的是你。\n你像夜里的一束光，在我最焦虑、最孤独、最失落的时候，温柔地照亮我。\n当我被卡在代码的一行死循环时，是你的鼓励让我坚持下去；\n当我因为项目失败而怀疑自己时，是你的耐心与理解让我重新相信自己。\n愿我用未来所有的温柔与坚韧，回应你曾给予我的无限爱意。\n“你的名字，是我写过最温柔的代码。”\n致我亲爱的父母 感谢你们无条件的支持与信任，\n从我踏上编程这条道路开始，你们就给了我最大的自由与鼓励。\n或许你们不懂我写的每一行代码，不懂我学习到深夜的原因，\n但你们从来没有阻拦，只是把热好的饭菜放在桌上，把“早点休息”放在微信里。\n你们的理解，是我走到今天最大的底气。\n你们的爱，是我人生中最温柔的 buffer。\n愿我写下的每一行代码，\n都能回报我爱的人，和爱我的人。\n我的状态 编程技能： █████████░░░ 90%\n安全研究： ███████░░░░░ 70%\n熬夜抗性： ██████████ 100%\n耐心调 Bug： ████████░░░░ 80%\n对她的喜欢： █████████████ 200%\n技术栈 🐍\nPython\r⚙️\nGo\r💻\nC++\r🌐\nHugo\r我的成长路径 2024：进入太原理工大学 2025：使用 Hugo 搭建博客 “摸鱼小窝” 现在在做什么？ 深度学习网络安全 最近在读 《Hello 算法 》— 靳宇栋 最近在听 《唯一》— 邓紫棋 如果有一天… 如果有一天，我不再做开发者了，\n那我可能会开一家书屋，养一只猫，晒晒太阳，\n晚上写博客、做做饭，偶尔为她写一封信。\n但现在，我更想把青春献给热爱的技术，\n和那个愿意陪我熬夜 debug 的人。\n快问快答 Q：最喜欢的编程语言？\nA：Go，极简而强大。\nQ：你相信什么？\nA：努力不会被辜负，但情感更值得珍惜。\nQ：你理想的生活？\nA：有人爱，有事做，有所期待。\n感谢你愿意了解我，愿我们都能用热爱创造世界。","我的成长路径#我的成长路径":"","我的状态#我的状态":"","技术栈#技术栈":"","最近在听#最近在听":"","最近在读#最近在读":"","现在在做什么#现在在做什么？":"","致谢#致谢":""},"title":"关于"},"/blog/":{"data":{"":"\rRSS 订阅 "},"title":"博客"},"/blog/kali-linux/":{"data":{"":" 即将更新：目录结构"},"title":"Kali Linux"},"/blog/kali-linux/%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/":{"data":{"":"","#":"一、更改软件仓库镜像源 以 TUNA 清华源为例：Kali 软件仓库使用帮助\n1、在终端中执行命令，使用 vim 编辑器编辑 sources.list 文件\nsudo vim /etc/apt/sources.list 2、使用 # 注释 Kali 官方的镜像源并添加清华源\n# deb http://http.Kali.org/kali kali-rolling main contrib non-free non-free-firmware deb https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main non-free contrib non-free-firmware deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main non-free contrib non-free-firmware Note\n以下为更换软件仓库镜像源涉及到的一些问题，可选择性观看。\n为什么要换源 Kali 使用 apt 命令安装软件包时会在软件仓库的镜像源中查找并下载安装，但默认的 Kali 官方源服务器位于国外，国内用户直接访问可能速度较慢，甚至出现安装失败的情况，因此需要更换国内镜像源（如清华源）加快软件下载和更新速度 为什么配镜像源有 deb 和 deb-src deb：指定二进制软件包的下载地址 deb-src：指定源代码包的下载地址 普通用户如果只是安装软件而无需源码，就可以禁用 deb-src 甚至删除 deb-src 行以节省 apt update 时间，如果需要阅读某个软件的源代码、重新编译软件或调试程序等就需要启用 deb-src 下载源码\n为什么 /etc/apt 有 sources.list 和 sources.list.d sources.list：主配置文件，存放系统默认的软件仓库地址（如官方源、第三方源等） sources.list.d：附加配置文件目录，用于存放额外的软件源配置文件（通常以 .list 结尾），不同的软件或第三方源可以单独存放一个文件，避免混在 sources.list 里 Docker 的源可能存放在 /etc/apt/sources.list.d/docker.list Google Chrome 的源可能存放在 /etc/apt/sources.list.d/google-chrome.list 二、网络配置 1、查看当前网络连接\nnmcli connection show NAME：接口名称 TYPE：类型 ethernet：以太网 loopback：回环 DEVICE：设备（网卡名） 记下需要修改网络配置的接口名称（NAME）\n┌──(hailo㉿kali-Hailo)-[~] └─$ sudo nmcli connection show NAME UUID TYPE DEVICE Wired connection 1 56d99757-efc2-4ee2-8887-ab710c94094f ethernet eth0 lo b9fa5e22-368b-450b-9928-a65db44b61f5 loopback lo 2、修改网络配置\nNAME：网络接口名称 ipv4.addresses：IP 地址 / 子网掩码 ipv4.gateway：默认网关 ipv4.dns：DNS 地址（可以只填主 DNS 地址，若有二级 DNS，使用 , 进行分隔） 腾讯云 DNSPod Public DNS：119.29.29.29 阿里云公共 DNS：223.5.5.5 ipv4.method：网络配置方式 manual：手动，即配置静态 IP 地址（static） auto：自动，即使用 DHCP 配置动态 IP 地址（dynamic） 配置静态 IP 地址：\nsudo nmcli connection modify \"NAME\" ipv4.addresses \"ADDRESS/NETMASK\" ipv4.gateway \"GATEWAY\" ipv4.dns \"DNS_ADDRESS,DNS_ADDRESS\" ipv4.method manual ┌──(hailo㉿kali-Hailo)-[~] └─$ sudo nmcli connection modify \"Wired connection 1\" ipv4.addresses \"192.168.50.20/24\" ipv4.gateway \"192.168.50.2\" ipv4.dns \"119.29.29.29,223.5.5.5\" ipv4.method manual 配置动态 IP 地址：\nsudo nmcli connection modify \"NAME\" ipv4.method auto ┌──(hailo㉿kali-Hailo)-[~] └─$ sudo nmcli connection modify \"Wired connection 1\" ipv4.method auto 3、重启网络服务使配置生效\nsudo systemctl restart NetworkManager 4、查看网络设备信息\nifconfig ┌──(hailo㉿kali-Hailo)-[~] └─$ ifconfig eth0: flags=4163\u003cUP,BROADCAST,RUNNING,MULTICAST\u003e mtu 1500 inet 192.168.50.133 netmask 255.255.255.0 broadcast 192.168.50.255 inet6 fe80::20c:29ff:fe13:bcaa prefixlen 64 scopeid 0x20\u003clink\u003e ether 00:0c:29:13:bc:aa txqueuelen 1000 (Ethernet) RX packets 995 bytes 74368 (72.6 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 242 bytes 68252 (66.6 KiB) TX errors 0 dropped 6 overruns 0 carrier 0 collisions 0 lo: flags=73\u003cUP,LOOPBACK,RUNNING\u003e mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10\u003chost\u003e loop txqueuelen 1000 (Local Loopback) RX packets 16 bytes 1128 (1.1 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 16 bytes 1128 (1.1 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 ┌──(hailo㉿kali-Hailo)-[~] └─$ ifconfig eth0: flags=4163\u003cUP,BROADCAST,RUNNING,MULTICAST\u003e mtu 1500 inet 192.168.50.20 netmask 255.255.255.0 broadcast 192.168.50.255 inet6 fe80::20c:29ff:fe13:bcaa prefixlen 64 scopeid 0x20\u003clink\u003e ether 00:0c:29:13:bc:aa txqueuelen 1000 (Ethernet) RX packets 995 bytes 74368 (72.6 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 292 bytes 81522 (79.6 KiB) TX errors 0 dropped 6 overruns 0 carrier 0 collisions 0 lo: flags=73\u003cUP,LOOPBACK,RUNNING\u003e mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10\u003chost\u003e loop txqueuelen 1000 (Local Loopback) RX packets 16 bytes 1128 (1.1 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 16 bytes 1128 (1.1 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 "},"title":"系统配置"},"/blog/kali-linux/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/":{"data":{"":"","#":"一、apt 1、更新软件包列表 sudo apt update Note\n仅同步本地软件包索引与配置的软件源中的最新信息，但不会实际安装或升级任何软件。\n2、升级软件包 仅升级当前已安装的软件包，不会主动安装新依赖或删除旧包，适合日常维护，避免因依赖变化而导致系统不稳定。\nsudo apt upgrade 不仅会升级软件包，还会自动处理依赖关系（安装新依赖或删除冲突的旧包），适合大版本升级，解决复杂的依赖调整。\nsudo apt full-upgrade 3、安装指定的软件包 sudo apt install \u003cpackage_name\u003e 4、移除软件包 移除指定软件包但保留其配置文件\nsudo apt remove \u003cpackage_name\u003e 完全移除软件包及其配置文件\nsudo apt purge \u003cpackage_name\u003e 自动移除那些被安装作为其他软件包的依赖项，但现在不再被任何已安装软件包所需的软件包\nsudo apt autoremove 在已配置的软件源中搜索包含指定关键词的软件包\nsudo apt search \u003ckeyword\u003e "},"title":"终端命令"},"/blog/newstar-ctf-2024/%E8%A5%BF%E7%94%B5-ctf-%E7%BB%88%E7%AB%AF-wsrx/":{"data":{"":"","#":"一、WSRX 的下载与安装 下载地址：WebSocketReflectorX\n二、添加到环境变量 D:\\Application\\WebSocketReflectorX 三、编写 bat 脚本 以 wsrx_ctf.bat 为例，放在 D:\\Application\\WebSocketReflectorX 目录：\n@echo off chcp 65001 set /p wsrx=请输入 WSRX 地址： echo link: 127.0.0.1:3307 wsrx.exe connect %wsrx% --host 127.0.0.1 --port 3307 "},"title":"西电 CTF 终端 WSRX"},"/blog/newstar-ctf-2024/week1-web-%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/":{"data":{"":"","headach3#headach3":"","pangbai-过家家1#PangBai 过家家（1）":"headach3 提示：My HEAD(er) aches!!!!! HELP ME DOCTOR!!!\n根据提示找到响应头，获得 flag{You_Ar3_R3Ally_A_9ooD_d0ctor}\n会赢吗 \u003c!-- flag第一部分：ZmxhZ3tXQTB3，开始你的新学期吧！:/4cqu1siti0n --\u003e\n\u003cscript\u003e async function revealFlag(className) { try { const response = await fetch(`/api/flag/${className}`, { method: 'POST', headers: { 'Content-Type': 'application/json' } }); if (response.ok) { const data = await response.json(); console.log(`恭喜你！你获得了第二部分的 flag: ${data.flag}\\n……\\n时光荏苒，你成长了很多，也发生了一些事情。去看看吧：/${data.nextLevel}`); } else { console.error('请求失败，请检查输入或服务器响应。'); } } catch (error) { console.error('请求过程中出现错误:', error); } } // 控制台提示 console.log(\"你似乎对这门叫做4cqu1siti0n的课很好奇？那就来看看控制台吧！\"); \u003c/script\u003e PangBai 过家家（1） Level 1：初出茅庐 提示：PangBai 的头部（Header）里便隐藏着一些秘密，需要你主动去发现。\n根据提示检查之前 response 中的响应头信息，发现 Location 字段中给出了下一 Level 的地址，Location: /da90daff-eac4-438a-8743-dee177700489。\n直接访问 http://127.0.0.1:3307/da90daff-eac4-438a-8743-dee177700489 进入 Level 2。\nLevel 2: 云程发轫 提示：向 PangBai 询问（Query）一下（ask=miao）吧 ~\n根据提示使用 GET 方法（在 URL 加入 ?parameter=value）传入参数 ask=miao，直接访问 http://127.0.0.1:3307/?ask=miao 进入 Level 3。\nLevel 3: 探赜索隐 提示：用另一种方法（Method）打声招呼（say=hello）吧 ~\n常用的 request 方法有 GET 和 POST ，Level 2 使用了 GET 方法，根据提示这次使用 POST 方法传参 say=hello，Content-Type 选择 application/x-www-form-urlencoded 类型。\n劫持请求：\n修改请求：\n进入 Level 4。\nLevel 4: 不悱不发 提示：你需要使用正确的方法（Method）来与 PangBai 沟通。\n由于 302 重定向的原因，此时 request 方法又变成了 GET，使用与 Level 3 相同的 POST 方法重新请求。\nPOST /?ask=miao HTTP/1.1 Host: 127.0.0.1:3307 Sec-Fetch-Mode: navigate Accept-Encoding: gzip, deflate, br, zstd Accept-Language: zh-CN,zh;q=0.9 sec-ch-ua-mobile: ?0 sec-ch-ua: \"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\" Sec-Fetch-Site: none Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 sec-ch-ua-platform: \"Windows\" Sec-Fetch-Dest: document Cache-Control: max-age=0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 Sec-Fetch-User: ?1 Cookie: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsZXZlbCI6NH0.g5672cQm3oc9BNuwUnE1yHl8UZQayXA2N_WDw4JbGQM Content-Type: application/x-www-form-urlencoded say=hello 提示：PangBai 回应了呢！可只有 Papa 的话语才能让她感到安心。 代理人（Agent)，这个委托你就接了吧！\n劫持请求，User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36，根据提示将 Mozilla 修改为 Papa。\n提示：你的话语似乎没有对 PangBai 起效，试着说「玛卡巴卡阿卡哇卡米卡玛卡呣」。\n根据提示将 say=hello 替换为 say=玛卡巴卡阿卡哇卡米卡玛卡呣\n进入 Level 5。\nLevel 5: 渐入佳境 提示：PangBai 依然对你比较警惕，因此「玛卡巴卡阿卡哇卡米卡玛卡呣」或许是不可省略的。\n根据提示，我们仍然需要传递参数 say=玛卡巴卡阿卡哇卡米卡玛卡呣，与 Level 4 相同，由于 302 重定向的原因，需要使用 POST 方法重新请求。\n提示：这里便是 PangBai 的心境了呢！试着解开心结吧 ~ 或许可以尝试用修改（PATCH）的方法提交一个补丁包（name=“file”; filename=\"*.zip\"）试试。\n根据提示，我们需要使用 PATCH 方法提交一个补丁包，这里提供两种方法。\n1、利用 Python 的 requests 模块请求\nimport requests url = 'http://127.0.0.1:3307/?ask=miao' headers = { 'Host': '127.0.0.1:3307', 'Sec-Fetch-Site': 'none', 'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7', 'sec-ch-ua': '\"Google Chrome\";v=\"135\", \"Not-A.Brand\";v=\"8\", \"Chromium\";v=\"135\"', 'sec-ch-ua-platform': '\"Windows\"', 'Upgrade-Insecure-Requests': '1', 'Sec-Fetch-Mode': 'navigate', 'Accept-Encoding': 'gzip, deflate, br, zstd', 'Sec-Fetch-User': '?1', 'User-Agent': 'Papa/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36', 'Accept-Language': 'zh-CN,zh;q=0.9', 'sec-ch-ua-mobile': '?0', 'Cache-Control': 'max-age=0', 'Sec-Fetch-Dest': 'document', 'Cookie': 'token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsZXZlbCI6NX0.aSNfpRjut2OiqeDG8CdhjCiqv2CensxCWsXEJO_ZSKw', } files = {'file': ('filename.zip', 'nothing to send')} data = {'say': '玛卡巴卡阿卡哇卡米卡玛卡呣'} session = requests.Session() response = session.patch(url, headers=headers, files=files, data=data) with open('response_text/level-5.txt', 'w', encoding='utf-8') as f: f.write(response.text) print('Cookies:', session.cookies) 运行结果：\nRequestsCookieJar[\u003cCookie token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsZXZlbCI6Nn0.D84JosG9QpYj69hSrIaH36ofPNNKZwRAyqr2n14y5LI for 127.0.0.1/\u003e]\u003e 在 Console 中使用 document.cookie 更新 cookie 值，刷新后进入 Level 6。\ndocument.cookie = \"token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsZXZlbCI6Nn0.D84JosG9QpYj69hSrIaH36ofPNNKZwRAyqr2n14y5LI\" 2、使用 PATCH 方法和 multipart/form-data 内容类型上传文件\nLevel 6: 一方通行 提示：还在等什么？距离成为 PangBai 的亲人（localhost）只有一步之遥了呢！ 这里的前方是一方通行啊！Level 6 可不是容易的！\n根据提示，我们需要通过 伪造请求头 的方式来模拟本地请求的特征，让服务器误以为请求来自 localhost（127.0.0.1）。\n劫持请求，在请求头中添加 X-Forwarded-For: localhost（其他可伪造的请求头有：X-Real-IP、Referer）\n提示：PangBai 以一种难以形容的表情望着你——激动的、怀念的，却带着些不安与惊恐，像落单后归家的雏鸟，又宛若雷暴中遇难的船员。 你似乎无法抵御这种感觉的萦绕，像是一瞬间被推入到无法言喻的深渊。尽管你尽力摆脱，但即便今后夜间偶见酣眠，这一瞬间塑成的梦魇也成为了美梦的常客。 「像■■■■验体■■不可能■■■■ JWT 这种■■ F4invkTHj8bU1BoH ■■■密钥，除非■■■■■走，难道■■■■■■吗？！」 「……」\n推测 F4invkTHj8bU1BoH 是 JWT (JSON Web Tokens) 的密钥，使用密钥可以在 JWT 进行在线签名和验证（获取下一个 Level 的 token）。\n将当前的 token 输入到 Encoded 可以看到里面的数据（这里显示 Invalid Signature 是因为没有输入正确的密钥）。\n经过多次试验发现最后一关并不是 Level 7，而是 Level 0，使用密钥 F4invkTHj8bU1BoH 进行签名，获得 Level 0 的 token。\n在 Console 中使用 document.cookie 更新 cookie 值，刷新后进入 Level 0。\ndocument.cookie = \"token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsZXZlbCI6MH0.7zPrTPLK3ZURtmd34FfByRYPm9a425XdcktwV5hFAvs\" Level 0: 此心安处是吾乡 提示：「PangBai！危险！PangBai！！PangBai！！！」 从梦中醒来\n点击 从梦中醒来 获得 flag{79d688a9-c5f5-61c9-dda1-e101ad562ae4}","会赢吗#会赢吗":""},"title":"Week1 Web 网络攻防"},"/blog/newstar-ctf-2024/week2-web-%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2/":{"data":{"":"","遗失的拉链#遗失的拉链":"遗失的拉链 提示：Pangbai 的拉链找不到了 你可以帮他找到他的拉链吗\n根据提示拉链应该与 zip 有关，这里说拉链找不到了，可以使用 dirsearch 进行目录扫描查找与 zip 相关的内容\npython dirsearch.py -u 127.0.0.1:3307 扫描结果：\n_|. _ _ _ _ _ _|_ v0.4.3 (_||| _) (/_(_|| (_| ) Extensions: php, aspx, jsp, html, js | HTTP method: GET | Threads: 25 | Wordlist size: 11460 Output File: C:\\Users\\puppy\\Desktop\\dirsearch-0.4.3\\reports\\_127.0.0.1_3307\\_25-04-24_09-08-17.txt Target: http://127.0.0.1:3307/ [09:08:18] Starting: [09:08:24] 403 - 276B - /.ht_wsr.txt [09:08:24] 403 - 276B - /.htaccess.save [09:08:24] 403 - 276B - /.htaccess.sample [09:08:24] 403 - 276B - /.htaccess.orig [09:08:24] 403 - 276B - /.htaccess.bak1 [09:08:24] 403 - 276B - /.htaccess_extra [09:08:24] 403 - 276B - /.htaccessBAK [09:08:24] 403 - 276B - /.htaccess_orig [09:08:24] 403 - 276B - /.htaccess_sc [09:08:24] 403 - 276B - /.htaccessOLD2 [09:08:24] 403 - 276B - /.htaccessOLD [09:08:24] 403 - 276B - /.html [09:08:24] 403 - 276B - /.htm [09:08:24] 403 - 276B - /.htpasswd_test [09:08:24] 403 - 276B - /.httr-oauth [09:08:24] 403 - 276B - /.htpasswds [09:08:58] 200 - 861B - /index.html [09:09:17] 200 - 3KB - /server-status/ [09:09:17] 200 - 3KB - /server-status [09:09:32] 200 - 1KB - /www.zip Task Completed 访问 127.0.0.1:3307/www.zip，下载解压后得到 pizwww.php\n\u003c?php error_reporting(0); //for fun if(isset($_GET['new'])\u0026\u0026isset($_POST['star'])){ if(sha1($_GET['new'])===md5($_POST['star'])\u0026\u0026$_GET['new']!==$_POST['star']){ //欸 为啥sha1和md5相等呢 $cmd = $_POST['cmd']; if (preg_match(\"/cat|flag/i\", $cmd)) { die(\"u can not do this \"); } echo eval($cmd); }else{ echo \"Wrong\"; } } flowchart LR\rA@{ shape: stadium, label: \"开始\" } --\u003e B@{ shape: rounded, label: \"关闭错误报告\" }\rB --\u003e C@{ shape: diamond, label: \"设置参数 new 和 star\" }\rC --\u003e|是| D@{ shape: diamond, label: \"(sha1(new) == md5(star)) \u0026\u0026 (new != star)\" }\rC --\u003e|否| E@{ shape: stadium, label: \"结束\" }\rD --\u003e F@{ shape: rounded, label: \"$cmd\" }\rF --\u003e G 代码审计：\nerror_reporting(0);：关闭错误报告 判断是否通过 GET 方法和 POST 方法分别传入参数 new 和 star TRUE，继续判断 new 的 sha1 哈希值和 star 的 md5 哈希值是否相等并且 new 和 star 的内容不同 FALSE，输出 Wrong TRUE，将 POST 方法传入的参数 cmd 值赋给变量 $cmd "},"title":"Week2 Web 网络攻防"},"/blog/php/php-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E7%BB%95%E8%BF%87/":{"data":{"":"","#":"示例一 $cmd = $_POST['cmd']; if (preg_match(\"/cat|flag/i\", $cmd)) { die(\"u can not do this \"); } echo eval($cmd); 代码审计：\n从 HTTP 请求的 POST 方法获取数据，并将名为 cmd 的字段的值赋给变量 $cmd 使用正则表达式匹配 $cmd 中的 cat 和 flag，修饰符 i（case-insensitive）表示不区分大小写 如果匹配成功就终止脚本执行，并输出消息 \"u can not do this \" 如果匹配失败就使用 eval($cmd) 执行 PHP 代码，并输出执行结果 需求：\n查找 flag 文件位置：find / -iname flag 查看 falg 文件内容：cat /flag 解决方法： $(command) 命令替换\n$(...) 是 Shell 中命令替换的语法，它允许在一个命令中执行另一个命令，并将该命令的输出作为结果返回嵌入到其他命令中\nfind / -iname fla$(echo g) ca$(echo t) /fla$(echo g) "},"title":"PHP 正则表达式的绕过"},"/blog/python/anaconda-%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/":{"data":{"":"","#":"一、Anaconda 的下载与安装 下载地址：Anaconda\n二、添加到环境变量 D:\\Application\\anaconda3 D:\\Application\\anaconda3\\Scripts D:\\Application\\anaconda3\\Library\\bin D:\\Application\\anaconda3\\Library\\mingw-w64\\bin D:\\Application\\anaconda3\\Library\\usr\\bin 三、Pycharm 添加解释器 "},"title":"Anaconda 的安装与配置"},"/blog/python/requests/":{"data":{"":"","main-interface#Main Interface":"","request-sessions#Request Sessions":" Note\n官方文档：Requests\nMain Interface 可以通过以下方法访问请求的所有功能，它们都会返回一个 Response 对象\nrequests.request(method, url, **kwargs)：构造并发送请求\n参数：\nmethod：新请求对象的方法（GET、OPTIONS、HEAD、POST、PUT、PATCH 或 DELETE） url：新请求对象的 URL params：(可选）字典，在请求的查询字符串中要发送的元组或字节列表 data：(可选）要在请求正文中发送的字典、元组列表、字节或类文件对象 json：(可选）在请求正文中发送的 JSON 可序列化 Python 对象 headers：(可选）与请求一起发送的 HTTP 请求头信息字典 cookies： (可选）与请求一起发送的 Dict 或 CookieJar 对象 files：(可选）用于多部分编码上传的 'name': file-like-objects（或 {'name': file-tuple}）字典。file-tuple 可以是 2 元组 ('filename'、fileobj)、3 元组 ('filename'、fileobj、'content_type') 或 4 元组 ('filename'、fileobj、'content_type'、custom_headers)，其中content_type是定义给定文件内容类型的字符串，custom_headers 是包含要为文件添加的附加标头的类字典对象 timeout(float or tuple)： (可选）等待服务器发送数据多少秒后放弃，用浮点数或（连接超时、读取超时）元组表示。 Request Sessions class requests.Session（请求会话， 提供 cookie 持久性、连接池和配置）\n1、基础用法\nimport requests session = requests.Session() session.get('https://www.example.com') 2、常用方法\nget(url, **kwargs)：发送 GET 请求，返回 Response 对象\n参数：\nurl：新请求对象的 URL **kwargs：request 接收的可选参数 post(url, data=None, json=None, **kwargs)：发送 POST 请求，返回 Response 对象\n参数：\nurl：新请求对象的 URL data：(可选）要在请求正文中发送的字典、元组列表、字节或类文件对象 json：(可选）在请求正文中发送的 json **kwargs：request 接收的可选参数 patch(url, data=None, **kwargs)：发送 PATCH 请求，返回 Response 对象\n参数：\nurl：新请求对象的 URL data：(可选）要在请求正文中发送的字典、元组列表、字节或类文件对象 **kwargs：request 接收的可选参数 "},"title":"Requests"},"/docs/":{"data":{"":"","-快速入口#🚀 快速入口":"🚀 快速入口 以下是本项目文档的主要部分，您可以直接点击标题跳转到相应章节：\nCisco PT 实验\r渗透测试\rPHP\rWeb 架构安全\r红队工具"},"title":"文档"},"/docs/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/":{"data":{"":"这是 渗透测试 部分的概述内容…\nSQL 注入\r环境配置\rXSS\r待完成内容：闭合方式判断、Cookie、base64、user-agent、refer 进行sql注入我需要获取user()还是current_user() file_priv hosts文件目录和作用 一句话木马"},"title":"渗透测试"},"/docs/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/":{"data":{"":"这是 环境配置 部分的概述内容…\n靶场部署\r浏览器扩展\rBurp Suite"},"title":"环境配置"},"/docs/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%A9%E5%B1%95/":{"data":{"":"","#":"1、HackBar "},"title":"浏览器扩展"},"/docs/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/%E9%9D%B6%E5%9C%BA%E9%83%A8%E7%BD%B2/":{"data":{"":"","#":"一、sqli-labs 1、安装 phpStudy 根据自己的操作系统下载 32 位 或 64 位版本（一般是 64 位），下载链接：phpStudy\nWarning\n将 phpStudy 安装到 C:\\phpstudy_pro（自定义安装目录时注意路径中不能出现空格）\n2、下载 sqli-labs 使用 git 克隆项目，项目地址：sqli-labs\ngit clone https://github.com/Audi-1/sqli-labs.git sqli-labs 3、配置 sqli-labs 启动 phpStudy 的 Web 服务\n删除 phpStudy 的默认网站\n在 phpStudy 中新建网站\n域名：localhost PHP版本：php5.3.29nts（需要安装） Note\n这里选择 php5.3.29nts 版本是因为 sqli-labs 是一个比较老的项目，使用的部分 php 代码在新版本中可能不支持或已被移除。\n修改数据库 root 密码\n打开 localhost 网站根目录\n在根目录中新建 index.php 文件并添加以下内容（便于后续部署多个靶场）\n\u003c?php header('Content-Type: text/html; charset=utf-8'); // 允许显示的目录 $allowed_dirs = array('sqli-labs'); echo \"\u003ch4\u003e靶场目录\u003c/h4\u003e\"; echo \"\u003cul\u003e\"; foreach($allowed_dirs as $dir) { if(is_dir($dir)) { echo \"\u003cli\u003e\u003ca href='$dir/'\u003e\" . ucfirst($dir) . \"\u003c/a\u003e\u003c/li\u003e\"; } } echo \"\u003c/ul\u003e\"; ?\u003e Note\n$allowed_dirs = array('sqli-labs'); 这里的 'sqli-labs' 是靶场的目录名，可以根据实际情况添加或修改，多个目录名之间使用半角逗号 , 进行分隔。\n将下载的 sqli-labs 复制到网站根目录\n修改 sqli-labs\\sql-connections\\db-creds.inc 数据库连接配置文件\n$dbuser='root'：使用 root 用户\n$dbpass='123456'：修改过后的 root 用户的密码\n使用 IP 地址访问靶场目录中的 sqli-labs\n安装 / 初始化 sqli-labs\n显示如下信息表示安装成功\n使用 sqli-labs 进行 SQL 注入的学习"},"title":"靶场部署"},"/docs/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/burp-suite/":{"data":{"":"","#":"一、Java 环境的配置 Note\nBurp Suite 是一个基于 Java 开发的应用程序，因此需要配置 Java 环境来执行其代码。\n下载链接：Oracle Java\n下载 Windows 版本的 JDK\n将 JDK 的压缩包解压到任意指定的目录（以 D:\\Program Files\\Java 为例）\n配置环境变量\n新建系统变量 JAVA_HOME （以 D:\\Program Files\\Java\\jdk-24 为例）\n编辑系统环境变量 Path，添加 %JAVA_HOME%\\bin\n验证 Java 环境\njava -version 检查 Java 版本 javac -version 检查 Java 编译器版本 二、Burp Suite 的安装 下载链接：Burp Suite\n下载 JAR 版本的 Burp Suite\n下载 BurpLoaderKeygen\nWarning\n由于涉及到版权问题，该软件请在 Github 或 Bing 等网站自行搜索下载，仅供学习和交流使用，商业使用请购买正版软件！\n将下载的 Burp Suite 和 BurpLoaderKeygen 放在任意指定的目录（以 D:\\Program Files\\burpsuite_pro 为例）\n启动 BurpLoaderKeygen 加载器（在 D:\\Program Files\\burpsuite_pro 目录）\njava -jar BurpLoaderKeygen.jar 配置 BurpLoaderKeygen 加载器\n勾选 Auto Run，下次打开 BurpLoaderKeygen 时会自动运行 Burp Suite 任意修改 License Text（可选，以 licensed to Hailo 为例） 复制 License 的内容 点击 Run 运行 Burp Suite 激活 Burp Suite\n点击 Next 跳过 License Agreement\n将之前复制 License 的内容粘贴到 License Key\n选择手动激活 Manual activation\n复制 request\n粘贴到 BurpLoaderKeygen 的 Activation Request 并复制 Activation Response\n粘贴到 Burp Suite 的 response\n成功激活\n优化 Burp Suite 的启动\n新建 burpsuite.bat 文件并放到 Burp Suite 的同级目录下\njava -jar \"D:\\Program Files\\burpsuite_pro\\BurpLoaderKeygen.jar\" 将 D:\\Program Files\\burpsuite_pro 添加到系统环境变量\n在 cmd 中使用 burpsuite 命令运行 Burp Suite"},"title":"Burp Suite"},"/docs/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/sql-%E6%B3%A8%E5%85%A5/":{"data":{"":"这是 渗透测试 部分的概述内容…\n基本流程\rsqli-labs 攻略"},"title":"SQL 注入"},"/docs/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/sql-%E6%B3%A8%E5%85%A5/sqli-labs-%E6%94%BB%E7%95%A5/":{"data":{"":"","#":"一、Page-1 "},"title":"Sqli Labs 攻略"},"/docs/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/xss/":{"data":{"":"这是 渗透测试 部分的概述内容…\nPortSwigger 攻略"},"title":"XSS"},"/docs/%E7%BA%A2%E9%98%9F%E5%B7%A5%E5%85%B7/":{"data":{"":"\rdirsearch\rGitHacker"},"title":"红队工具"},"/docs/%E7%BA%A2%E9%98%9F%E5%B7%A5%E5%85%B7/githacker/":{"data":{"":"","#":"官方仓库：GitHacker\n一、描述 这是一个多线程工具，用于利用 .git 文件夹泄露漏洞，它几乎能够完全下载目标 .git 文件夹，即使目标网站禁用了目录列出功能，该工具也能通过暴力破解常见的 .git 文件来工作。\n通过 GitHacker，您可以查看开发者的提交历史，分支，…，暂存区，这有助于更好地理解目标代码库，甚至发现安全漏洞。\n二、安装 python -m pip install -i https://pypi.org/simple/ GitHacker 三、用法 usage: githacker [-h] (--url URL | --url-file URL_FILE) --output-folder OUTPUT_FOLDER [--brute] [--enable-manually-check-dangerous-git-files] [--threads THREADS] [--delay DELAY] [--version] GitHacker options: -h, --help 显示此帮助信息并退出 --url URL 目标网站的 URL，该网站暴露了 .git 文件夹 --url-file URL_FILE 包含目标网站 URL 列表的文件，这些网站暴露了 `.git` 文件夹 --output-folder OUTPUT_FOLDER 本地文件夹，所有被利用的代码库将存储在该文件夹中，每个代码库将以 md5(url) 命名的文件夹存储 --brute 启用暴力破解分支/标签名称 --enable-manually-check-dangerous-git-files 启用手动检查可能导致远程代码执行（RCE）的危险 Git 文件（例如：.git/config，.git/hook/pre-commit）。如果启用此选项，GitHacker 将不会下载可能危险的文件。 --threads THREADS 下载时使用的线程数 --delay DELAY HTTP 请求之间的延迟时间（单位：秒） --version 显示程序版本号并退出 "},"title":"GitHacker"},"/docs/cisco-pt-%E5%AE%9E%E9%AA%8C/":{"data":{"":"","-快速入口#🚀 快速入口":"这是 Cisco PT 实验 部分的概述内容…\n🚀 快速入口 以下是本项目文档的主要部分，您可以直接点击标题跳转到相应章节：\nVLAN 基础配置\r跨 VLAN 通信"},"title":"Cisco PT 实验"},"/docs/cisco-pt-%E5%AE%9E%E9%AA%8C/%E8%B7%A8-vlan-%E9%80%9A%E4%BF%A1/":{"data":{"":"","#":"一、使用路由器的两个物理端口 Cisco PT 拓扑图 实验流程 1、配置 PC 的 IP 地址 2、配置路由器端口的 IP 地址 Router\u003een Router#conf t Enter configuration commands, one per line. End with CNTL/Z. Router(config)#int g 0/0/0 Router(config-if)#ip add 192.168.1.254 255.255.255.0 Router(config-if)#no sh Router(config-if)# %LINK-5-CHANGED: Interface GigabitEthernet0/0/0, changed state to up %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/0/0, changed state to up Router(config-if)#int g0/0/1 Router(config-if)#ip add 192.168.2.254 255.255.255.0 Router(config-if)#no sh Router(config-if)# %LINK-5-CHANGED: Interface GigabitEthernet0/0/1, changed state to up %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/0/1, changed state to up 3、配置 VLAN Switch\u003een Switch#conf t Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#vlan 10 Switch(config-vlan)#vlan 20 Switch(config-vlan)#exit Switch(config)#int f0/1 Switch(config-if)#sw mo ac Switch(config-if)#sw ac vl 10 Switch(config-if)#int f0/2 Switch(config-if)#sw mo ac Switch(config-if)#sw ac vl 20 Switch(config-if)#do sh vl b Switch(config-if)#int g0/1 Switch(config-if)#sw mo ac Switch(config-if)#sw ac vl 10 Switch(config-if)#int g0/2 Switch(config-if)#sw mo ac Switch(config-if)#sw ac vl 20 4、跨 VLAN 通信 ping 192.168.2.1 5、实验分析 当主机 ping 192.168.2.1 时，会检查目标 IP 是否与自身 IP 处于同一网段\n目标 IP 与源 IP 不在同一网段时，主机会将数据包发送到路由器进行路由\n主机查找自身的 ARP 缓存表中路由器的 MAC 地址条目并将 ICMP 包发送到路由器\n若自身 ARP 缓存表中不存在路由器的 MAC 地址条目，会先发送 ARP 报文请求路由器的 MAC 地址，然后将 ICMP 包发送到路由器\nICMP 包从 F0/1 端口进入交换机后会在帧头封装一个 802.1Q VLAN 标签\nTPID：一般为 0x8100，表示这是一个带 VLAN 标签的帧 TCI：包含了 VLAN ID 和优先级等信息 PRI：表示帧的优先级，当交换机阻塞时优先级高的帧会优先发送 CFI：表示 MAC 地址是否为经典格式，在以太网中的值通常为 0（经典格式） VLAN ID：VLAN 编号 ICMP 包从 G0/1 端口离开交换机前会剥掉帧头的 VLAN 标签\nICMP 包从 G0/2 端口进入交换机和从 F0/2 端口离开交换机以及目标主机回包时重复上述步骤，完成通信\nTip\n通过 TCI 判断数据帧所属的 VLAN ：整个 TCI 字段的后 12 位就是 VLAN ID，也可以使用计算公式（VID = TCI \u0026 0x0FFF）。 以 0x000a 为例，该 TCI 字段的后 12 位为 0x00a，即十进制的 10，因此该数据帧属于 VLAN 10。\n6、实验中遇到的问题 Important\n请先尝试自己思考，然后查看答案。\n交换机的 G0/1 和 G0/2 端口设置为 trunk 模式无法进行正常通信 ARP 报文从 F0/1 端口进入交换机后会在帧头封装一个 VLAN 标签 若将 G0/1 和 G0/2 端口设置为 trunk 模式，交换机转发数据帧时不会剥掉 VLAN 标签 路由器的 G0/0/0 和 G0/0/1 是普通物理端口，无法识别携带 VLAN 标签的数据帧 ARP 报文被路由器直接丢弃，主机无法获取到网关的 IP 地址，也就无法发送 ICMP 包 Simulation 看不到数据帧中封装的 VLAN 标签 F0/1 端口是 access 模式，数据帧进入交换机后会在帧头封装一个 VLAN 标签 G0/1 端口是 access 模式，数据帧离开交换机前又会剥掉帧头中的 VLAN 标签 F0/2 和 G0/2 原理同上，VLAN 标签仅在交换机内部进行处理 所以无法在 Simulation 看到数据帧中封装的 VLAN 标签 二、单臂路由 Cisco PT 拓扑图 实验流程 1、配置 PC 的 IP 地址 2、配置路由器端口的 IP 地址 Router\u003een Router#conf t Enter configuration commands, one per line. End with CNTL/Z. Router(config)#int g0/0/0 Router(config-if)#no sh Router(config-if)# %LINK-5-CHANGED: Interface GigabitEthernet0/0/0, changed state to up %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/0/0, changed state to up Router(config-if)#int g0/0/0.10 Router(config-subif)# %LINK-5-CHANGED: Interface GigabitEthernet0/0/0.10, changed state to up %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/0/0.10, changed state to up Router(config-subif)#en dot1q 10 Router(config-subif)#ip add 192.168.1.254 255.255.255.0 Router(config-subif)#int g0/0/0.20 Router(config-subif)# %LINK-5-CHANGED: Interface GigabitEthernet0/0/0.20, changed state to up %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/0/0.20, changed state to up Router(config-subif)#en dot1q 20 Router(config-subif)#ip add 192.168.2.254 255.255.255.0 3、配置 VLAN Switch\u003een Switch#conf t Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#int f0/1 Switch(config-if)#sw mo ac Switch(config-if)#sw ac vl 10 % Access VLAN does not exist. Creating vlan 10 Switch(config-if)#int f0/2 Switch(config-if)#sw mo ac Switch(config-if)#sw ac vl 20 % Access VLAN does not exist. Creating vlan 20 Switch(config-if)#int g0/1 Switch(config-if)#sw mo tr Switch(config-if)# %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/1, changed state to down %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet0/1, changed state to up Switch(config-if)#sw tr al vl al 4、跨 VLAN 通信 ping 192.168.2.1 5、实验分析 使用路由器的单个物理端口创建多个虚拟子接口 在子接口中使用命令 encapsulation dot1Q vlan \u003cVLAN_ID\u003e 启用 dot1Q 封装 进行 dot1Q 封装后的虚拟子接口可以处理携带 VLAN 标签的数据帧 将交换机的 G0/1 端口设置为 trunk 模式，使所有 VLAN 流量都可以到达路由器 ICMP 包从 F0/1 端口进入交换机后会在帧头封装一个 VLAN 10 标签 由于 G0/1 端口是 trunk 模式，转发数据帧时不会剥掉帧头的 VLAN 10 标签 路由器的 G0/0/0.10 子接口收到携带 VLAN 10 标签的数据帧后会进行路由和转发 路由器的 G0/0/0.20 子接口转发数据前会替换 VLAN 标签为 VLAN 20 由于 F0/2 端口是 access 模式，交换机剥掉数据帧中的 VLAN 20 标签后转发到目标主机 三、三层交换技术 Cisco PT 拓扑图 实验流程 1、配置 PC 的 IP 地址 2、配置三层交换机的路由功能 Switch\u003een Switch#conf t Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#vlan 10 Switch(config-vlan)#vlan 20 Switch(config-vlan)#exit Switch(config)#int vlan 10 Switch(config-if)# %LINK-5-CHANGED: Interface Vlan10, changed state to up Switch(config-if)#ip add 192.168.1.254 255.255.255.0 Switch(config-if)#int vlan 20 Switch(config-if)# %LINK-5-CHANGED: Interface Vlan20, changed state to up Switch(config-if)#ip add 192.168.2.254 255.255.255.0 Switch(config-if)#exit Switch(config)#ip routing Switch(config)#int g1/0/1 Switch(config-if)#sw mo tr Switch(config-if)# %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet1/0/1, changed state to down %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet1/0/1, changed state to up %LINEPROTO-5-UPDOWN: Line protocol on Interface Vlan10, changed state to up %LINEPROTO-5-UPDOWN: Line protocol on Interface Vlan20, changed state to up Switch(config-if)#sw tr al vl al Switch(config-if)#int g1/0/2 Switch(config-if)#sw mo tr Switch(config-if)# %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet1/0/2, changed state to down %LINEPROTO-5-UPDOWN: Line protocol on Interface GigabitEthernet1/0/2, changed state to up Switch(config-if)#sw tr al vl al Switch(config-if)#exit Switch(config)#do sh ip route Codes: C - connected, S - static, I - IGRP, R - RIP, M - mobile, B - BGP D - EIGRP, EX - EIGRP external, O - OSPF, IA - OSPF inter area N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2, E - EGP i - IS-IS, L1 - IS-IS level-1, L2 - IS-IS level-2, ia - IS-IS inter area * - candidate default, U - per-user static route, o - ODR P - periodic downloaded static route Gateway of last resort is not set C 192.168.1.0/24 is directly connected, Vlan10 C 192.168.2.0/24 is directly connected, Vlan20 Switch(config)# 3、配置二层交换机 VLAN 交换机 S1：\nSwitch\u003een Switch#conf t Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#int g0/1 Switch(config-if)#sw mo tr Switch(config-if)#sw tr al vl al Switch(config-if)#int f0/1 Switch(config-if)#sw mo ac Switch(config-if)#sw ac vl 10 % Access VLAN does not exist. Creating vlan 10 Switch(config-if)# 交换机 S2：\nSwitch\u003een Switch#conf t Enter configuration commands, one per line. End with CNTL/Z. Switch(config)#int f0/1 Switch(config-if)#sw mo ac Switch(config-if)#sw ac vl 20 % Access VLAN does not exist. Creating vlan 20 Switch(config-if)#int g0/1 Switch(config-if)#sw mo tr Switch(config-if)#sw tr al vl al Switch(config-if)# 4、跨 VLAN 通信 ping 192.168.2.1 5、实验分析 四、单臂路由访问互联网 五、三层交换技术访问互联网 "},"title":"跨 VLAN 通信"},"/docs/cisco-pt-%E5%AE%9E%E9%AA%8C/vlan-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/":{"data":{"":"","#":"Cisco PT 拓扑图 实验流程 Switch(config)#vlan 10 Switch(config-vlan)#exit Switch(config)#vlan 20 Switch(config-vlan)#exit 创建 VLAN vlan \u003cVLAN_ID\u003e (vlan 10) Switch#show vlan VLAN Name Status Ports ---- -------------------------------- --------- ------------------------------- 1 default active Fa0/1, Fa0/2, Fa0/3, Fa0/4 Fa0/5, Fa0/6, Fa0/7, Fa0/8 Fa0/9, Fa0/10, Fa0/11, Fa0/12 Fa0/13, Fa0/14, Fa0/15, Fa0/16 Fa0/17, Fa0/18, Fa0/19, Fa0/20 Fa0/21, Fa0/22, Fa0/23, Fa0/24 Gig0/1, Gig0/2 10 VLAN0010 active 20 VLAN0020 active 1002 fddi-default active 1003 token-ring-default active 1004 fddinet-default active 1005 trnet-default active VLAN Type SAID MTU Parent RingNo BridgeNo Stp BrdgMode Trans1 Trans2 ---- ----- ---------- ----- ------ ------ -------- ---- -------- ------ ------ 1 enet 100001 1500 - - - - - 0 0 10 enet 100010 1500 - - - - - 0 0 20 enet 100020 1500 - - - - - 0 0 1002 fddi 101002 1500 - - - - - 0 0 1003 tr 101003 1500 - - - - - 0 0 1004 fdnet 101004 1500 - - - ieee - 0 0 1005 trnet 101005 1500 - - - ibm - 0 0 VLAN Type SAID MTU Parent RingNo BridgeNo Stp BrdgMode Trans1 Trans2 ---- ----- ---------- ----- ------ ------ -------- ---- -------- ------ ------ Remote SPAN VLANs ------------------------------------------------------------------------------ Primary Secondary Type Ports ------- --------- ----------------- ------------------------------------------ Switch#show vlan brief VLAN Name Status Ports ---- -------------------------------- --------- ------------------------------- 1 default active Fa0/1, Fa0/2, Fa0/3, Fa0/4 Fa0/5, Fa0/6, Fa0/7, Fa0/8 Fa0/9, Fa0/10, Fa0/11, Fa0/12 Fa0/13, Fa0/14, Fa0/15, Fa0/16 Fa0/17, Fa0/18, Fa0/19, Fa0/20 Fa0/21, Fa0/22, Fa0/23, Fa0/24 Gig0/1, Gig0/2 10 VLAN0010 active 20 VLAN0020 active 1002 fddi-default active 1003 token-ring-default active 1004 fddinet-default active 1005 trnet-default active Switch#show vlan id 1 VLAN Name Status Ports ---- -------------------------------- --------- ------------------------------- 1 default active Fa0/1, Fa0/2, Fa0/3, Fa0/4 Fa0/5, Fa0/6, Fa0/7, Fa0/8 Fa0/9, Fa0/10, Fa0/11, Fa0/12 Fa0/13, Fa0/14, Fa0/15, Fa0/16 Fa0/17, Fa0/18, Fa0/19, Fa0/20 Fa0/21, Fa0/22, Fa0/23, Fa0/24 Gig0/1, Gig0/2 VLAN Type SAID MTU Parent RingNo BridgeNo Stp BrdgMode Trans1 Trans2 ---- ----- ---------- ----- ------ ------ -------- ---- -------- ------ ------ 1 enet 100001 1500 - - - - - 0 0 显示所有 VLAN 及其基本信息 show vlan brief 显示所有 VLAN 及其详细信息 show vlan 显示单个 VLAN 详细信息 show vlan id \u003cVLAN_ID\u003e (show vlan id 1) Switch(config)#interface fastEthernet 0/2 Switch(config-if)#switchport mode access Switch(config-if)#exit Switch(config)#interface fastEthernet 0/3 Switch(config-if)#switchport mode access Switch(config-if)#exit 将端口设置为接入（Access）模式 switchport mode access Switch(config)#interface fastEthernet 0/2 Switch(config-if)#switchport access vlan 10 Switch(config-if)#exit Switch(config)#interface fastEthernet 0/3 Switch(config-if)#switchport access vlan 20 Switch(config-if)#exit 为端口设置默认 VLAN switchport access vlan \u003cVLAN_ID\u003e (switchport access vlan 10) Switch#show interfaces switchport Name: Fa0/1 Switchport: Enabled Administrative Mode: dynamic auto Operational Mode: static access Administrative Trunking Encapsulation: dot1q Operational Trunking Encapsulation: native Negotiation of Trunking: On Access Mode VLAN: 1 (default) Trunking Native Mode VLAN: 1 (default) Voice VLAN: none Administrative private-vlan host-association: none Administrative private-vlan mapping: none Administrative private-vlan trunk native VLAN: none Administrative private-vlan trunk encapsulation: dot1q Administrative private-vlan trunk normal VLANs: none Administrative private-vlan trunk private VLANs: none Operational private-vlan: none Trunking VLANs Enabled: All Pruning VLANs Enabled: 2-1001 Capture Mode Disabled Capture VLANs Allowed: ALL Protected: false Unknown unicast blocked: disabled Unknown multicast blocked: disabled Appliance trust: none Name: Fa0/2 Switchport: Enabled Administrative Mode: static access Operational Mode: static access Administrative Trunking Encapsulation: dot1q Operational Trunking Encapsulation: native Negotiation of Trunking: Off Access Mode VLAN: 10 (VLAN0010) Trunking Native Mode VLAN: 1 (default) Voice VLAN: none Administrative private-vlan host-association: none Administrative private-vlan mapping: none Administrative private-vlan trunk native VLAN: none Administrative private-vlan trunk encapsulation: dot1q Administrative private-vlan trunk normal VLANs: none Administrative private-vlan trunk private VLANs: none Operational private-vlan: none Trunking VLANs Enabled: All Pruning VLANs Enabled: 2-1001 Capture Mode Disabled Capture VLANs Allowed: ALL Protected: false Unknown unicast blocked: disabled Unknown multicast blocked: disabled Appliance trust: none Name: Fa0/3 Switchport: Enabled Administrative Mode: static access Operational Mode: static access Administrative Trunking Encapsulation: dot1q Operational Trunking Encapsulation: native Negotiation of Trunking: Off Access Mode VLAN: 20 (VLAN0020) Trunking Native Mode VLAN: 1 (default) Voice VLAN: none Administrative private-vlan host-association: none Administrative private-vlan mapping: none Administrative private-vlan trunk native VLAN: none Administrative private-vlan trunk encapsulation: dot1q Switch#show interfaces fastethernet 0/2 switchport Name: Fa0/2 Switchport: Enabled Administrative Mode: static access Operational Mode: static access Administrative Trunking Encapsulation: dot1q Operational Trunking Encapsulation: native Negotiation of Trunking: Off Access Mode VLAN: 10 (VLAN0010) Trunking Native Mode VLAN: 1 (default) Voice VLAN: none Administrative private-vlan host-association: none Administrative private-vlan mapping: none Administrative private-vlan trunk native VLAN: none Administrative private-vlan trunk encapsulation: dot1q Administrative private-vlan trunk normal VLANs: none Administrative private-vlan trunk private VLANs: none Operational private-vlan: none Trunking VLANs Enabled: All Pruning VLANs Enabled: 2-1001 Capture Mode Disabled Capture VLANs Allowed: ALL Protected: false Unknown unicast blocked: disabled Unknown multicast blocked: disabled Appliance trust: none 查看所有端口的详细状态 show interfaces switchport 查看单个接口的详细状态 show interfaces \u003cINTERFACES_ID\u003e switchport (show interfaces fastethernet 0/2 switchport) Switch(config-if)#switchport mode trunk Switch(config-if)# %LINEPROTO-5-UPDOWN: Line protocol on Interface FastEthernet0/1, changed state to down %LINEPROTO-5-UPDOWN: Line protocol on Interface FastEthernet0/1, changed state to up 将端口设置为干道（Trunk）模式 switchport mode trunk Switch(config-if)#switchport trunk allowed vlan all Switch(config-if)#exit Switch(config)#do show interfaces f0/1 switchport Name: Fa0/1 Switchport: Enabled Administrative Mode: trunk Operational Mode: trunk Administrative Trunking Encapsulation: dot1q Operational Trunking Encapsulation: dot1q Negotiation of Trunking: On Access Mode VLAN: 1 (default) Trunking Native Mode VLAN: 1 (default) Voice VLAN: none Administrative private-vlan host-association: none Administrative private-vlan mapping: none Administrative private-vlan trunk native VLAN: none Administrative private-vlan trunk encapsulation: dot1q Administrative private-vlan trunk normal VLANs: none Administrative private-vlan trunk private VLANs: none Operational private-vlan: none Trunking VLANs Enabled: All Pruning VLANs Enabled: 2-1001 Capture Mode Disabled Capture VLANs Allowed: ALL Protected: false Unknown unicast blocked: disabled Unknown multicast blocked: disabled Appliance trust: none 允许 Trunk 端口通过所有 VLAN 流量 switchport trunk allowed vlan all Switch#show interfaces trunk Port Mode Encapsulation Status Native vlan Fa0/1 on 802.1q trunking 1 Port Vlans allowed on trunk Fa0/1 1-1005 Port Vlans allowed and active in management domain Fa0/1 1,10,20 Port Vlans in spanning tree forwarding state and not pruned Fa0/1 1,10,20 查看当前配置为 Trunk 的端口及其详细信息 show interfaces trunk "},"title":"VLAN 基础配置"},"/docs/php/":{"data":{"":"\r常量\r运算符"},"title":"PHP"},"/docs/php/%E5%B8%B8%E9%87%8F/":{"data":{"":"","#":"一、常量定义 define(常量名, 值) const 常量名 = 值 二、预定义常量 即 PHP 已经定义好的可以直接使用的常量\n变量名 值 __FILE__ 当前文件所在的绝对路径 __LINE__ 当前行号 PHP_OS 操作系统类型 PHP_VERSION PHP 版本 DIRECTORY_SEPARATOR 目录分隔符 三、示例代码 \u003c?php // 常量定义的方式 define(\"NAME1\", \"Hello World1\"); const NAME2 = \"Hello World2\"; echo NAME1.\"\u003cbr/\u003e\"; echo NAME2.\"\u003cbr/\u003e\"; // 预定义常量 echo __FILE__.\"\u003cbr/\u003e\"; echo __LINE__.\"\u003cbr/\u003e\"; echo PHP_OS.\"\u003cbr/\u003e\"; echo PHP_VERSION.\"\u003cbr/\u003e\"; echo DIRECTORY_SEPARATOR.\"\u003cbr/\u003e\"; 运行结果：\nHello World1 Hello World2 D:\\Workspace\\php\\learning\\const.php 12 WINNT 7.3.4 \\ "},"title":"常量"},"/docs/php/%E8%BF%90%E7%AE%97%E7%AC%A6/":{"data":{"":"","#":"一、算数运算符 示例代码：\n\u003c?php $a = 10; $b = 3; // 算数运算符 echo (-$b).\"\u003cbr/\u003e\"; echo ($a + $b).\"\u003cbr/\u003e\"; echo ($a - $b).\"\u003cbr/\u003e\"; echo ($a * $b).\"\u003cbr/\u003e\"; echo ($a / $b).\"\u003cbr/\u003e\"; echo ($a % $b).\"\u003cbr/\u003e\"; echo ($a++).\" \".($a).\"\u003cbr/\u003e\"; echo (++$a).\" \".($a).\"\u003cbr/\u003e\"; echo ($a--).\" \".($a).\"\u003cbr/\u003e\"; echo (--$a).\" \".($a).\"\u003cbr/\u003e\"; 运行结果：\n-3 13 7 30 3.3333333333333 1 10 11 12 12 12 11 10 10 二、连接运算符 示例代码：\n\u003c?php $name = \"Hailong!\"; $str = \"Hello \".$name.\"\u003cbr/\u003e\"; echo $str.\"\u003cbr/\u003e\"; 运行结果：\nHello Hailong! 三、赋值运算符 示例代码：\n\u003c?php $num1 = 10; $num2 = 3; $num1 += $num2; echo $num1.\"\u003cbr/\u003e\"; $num1 -= $num2; echo $num1.\"\u003cbr/\u003e\"; $num1 *= $num2; echo $num1.\"\u003cbr/\u003e\"; $num1 /= $num2; echo $num1.\"\u003cbr/\u003e\"; $num1 %= $num2; echo $num1.\"\u003cbr/\u003e\"; $num1 .= $num2; echo $num1.\"\u003cbr/\u003e\"; 运行结果：\n13 10 30 10 1 13 四、比较运算符 示例代码：\n\u003c?php $a = 10; $b = 20; var_dump($a == $b); echo \"\u003cbr/\u003e\"; var_dump($a === $b); echo \"\u003cbr/\u003e\"; var_dump($a != $b); echo \"\u003cbr/\u003e\"; var_dump($a \u003c\u003e $b); echo \"\u003cbr/\u003e\"; var_dump($a !== $b); echo \"\u003cbr/\u003e\"; var_dump($a \u003e $b); echo \"\u003cbr/\u003e\"; var_dump($a \u003c $b); echo \"\u003cbr/\u003e\"; var_dump($a \u003e= $b); echo \"\u003cbr/\u003e\"; var_dump($a \u003c= $b); echo \"\u003cbr/\u003e\"; 运行结果：\nbool(false) bool(false) bool(true) bool(true) bool(true) bool(false) bool(true) bool(false) bool(true) Note\n== ：等于，在数据类型不同时会进行数据类型转换，然后进行比较（0 == \"\"）。 === ：全等，在数据类型不同时不会进行数据类型转换，只有数据类型相同且值相等时才为 true。 != ：不等于，在数据类型不同时会进行数据类型转换，然后进行比较（1 != \"\"）。 !== ：不全等，在数据类型不同时不会进行数据类型转换，只有数据类型相同且值不等时才为 false Warning\nPHP 中规定使用 echo 输出布尔类型的时候，echo true 会在页面中输出 1，echo false 在页面中无输出，建议使用 var_dump() 输出结果。\n五、逻辑运算符 示例代码：\n\u003c?php $a = true; $b = false; var_dump($a and $b); echo \"\u003cbr/\u003e\"; var_dump($a \u0026\u0026 $b); echo \"\u003cbr/\u003e\"; var_dump($a or $b); echo \"\u003cbr/\u003e\"; var_dump($a || $b); echo \"\u003cbr/\u003e\"; var_dump($a xor $b); echo \"\u003cbr/\u003e\"; var_dump(!$a); echo \"\u003cbr/\u003e\"; 运行结果：\nbool(false) bool(false) bool(true) bool(true) bool(true) bool(false) 六、? : 运算符 示例代码：\n\u003c?php $a = 10; $b = 20; echo ($a \u003e $b ? \"true\" : \"false\").\"\u003cbr/\u003e\"; 运行结果：\nfalse 七、反引号运算符 使用反引号 `` 运算符可以调用系统命令\n示例代码：\n\u003c?php header('Content-Type: text/html; charset=GBK'); $cmd1 = \"whoami\"; $cmd2 = \"ipconfig\"; echo \"\u003cpre\u003e\".`$cmd1`; echo \"\u003cpre\u003e\".`$cmd2`; 运行结果：\nhailo-laptop\\puppy Windows IP 配置 以太网适配器 以太网: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 无线局域网适配器 本地连接* 9: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 无线局域网适配器 本地连接* 10: 媒体状态 . . . . . . . . . . . . : 媒体已断开连接 连接特定的 DNS 后缀 . . . . . . . : 无线局域网适配器 WLAN: 连接特定的 DNS 后缀 . . . . . . . : IPv6 地址 . . . . . . . . . . . . : 2409:8a0c:240:bbe0:e609:ee1a:c4cb:a87e 临时 IPv6 地址. . . . . . . . . . : 2409:8a0c:240:bbe0:5105:5a5a:5c8:8ca4 本地链接 IPv6 地址. . . . . . . . : fe80::2773:6473:2699:b0eb%18 IPv4 地址 . . . . . . . . . . . . : 192.168.1.82 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关. . . . . . . . . . . . . : fe80::1a4f:43ff:fe2d:cbd6%18 192.168.1.1 以太网适配器 VMware Network Adapter VMnet1: 连接特定的 DNS 后缀 . . . . . . . : 本地链接 IPv6 地址. . . . . . . . : fe80::5:b2a7:da70:4287%21 IPv4 地址 . . . . . . . . . . . . : 192.168.131.1 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关. . . . . . . . . . . . . : 以太网适配器 VMware Network Adapter VMnet8: 连接特定的 DNS 后缀 . . . . . . . : 本地链接 IPv6 地址. . . . . . . . : fe80::c0bb:4949:6737:4218%4 IPv4 地址 . . . . . . . . . . . . : 192.168.126.1 子网掩码 . . . . . . . . . . . . : 255.255.255.0 默认网关. . . . . . . . . . . . . : 隧道适配器 Teredo Tunneling Pseudo-Interface: 连接特定的 DNS 后缀 . . . . . . . : IPv6 地址 . . . . . . . . . . . . : 2001:0:2851:b9f0:1094:8ae6:90cb:a465 本地链接 IPv6 地址. . . . . . . . : fe80::1094:8ae6:90cb:a465%12 默认网关. . . . . . . . . . . . . : Warning\nheader() 是 PHP 中的一个函数，用于发送 HTTP 响应头到客户端（通常是浏览器）。由于 Windows 的命令行默认使用 GBK 编码方式，为避免输出乱码问题，可以使用 header('Content-Type: text/html; charset=GBK'); 更改网页编码。\n八、@运算符 使用 echo @$k; 可以屏蔽表达式可能发生的错误信息\n示例代码：\n\u003c?php echo $k; 运行结果：\nNotice: Undefined variable: k in D:\\Workspace\\php\\learning\\operator.php on line 3 "},"title":"运算符"},"/docs/web-%E6%9E%B6%E6%9E%84%E5%AE%89%E5%85%A8/":{"data":{"":"\rWeb 架构解析"},"title":"Web 架构安全"},"/logs/":{"data":{"2025-04-18#2025-04-18":"博客更新日志 (Blog Changelog)记录博客的所有更新、功能增强、设计变更等。\n2025-04-18 新增 修复 改进 ","博客更新日志-blog-changelog#博客更新日志 (Blog Changelog)":""},"title":"_index"}}